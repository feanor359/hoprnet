searchState.loadedDescShard("hopr_db_api", 0, "Crate for abstracting the required DB behavior of a HOPR …\nConvenience trait that contain all HOPR DB operations …\nContains the error value\nContains the success value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nChannels smart contract domain separator\nEnumerates different domain separators\nContains various on-chain information collected by Indexer,\nLedger smart contract domain separator\nContains information about node’s safe.\nNode safe registry smart contract domain separator\nChannels smart contract domain separator\nConvenience method to retrieve domain separator according …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLedger smart contract domain separator\nMinimum winning probability\nSafe module address.\nNetwork registry state\nSafe address\nNode safe registry smart contract domain separator\nCurrent ticket price\nActual origin.\nStatus of the peer as recorded by a network component.\nStatistical observation related to peers in the network. …\nAdds a peer to the backend.\nReturns count of all peers.\nNumber of bad-quality non-public nodes.\nNumber of bad-quality public nodes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the average quality of this peer\nGets stored information about the peer.\nReturns a stream of all stored peers, optionally matching …\nGets the immediate node quality\nNumber of good-quality non-public nodes.\nNumber of good-quality public nodes.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLower and upper bounds (both inclusive) on last seen …\nReturns the statistics on the stored peers.\nLower and upper bounds (both inclusive) on peer quality.\nRemoves the peer from the backend.\nUpdates stored information about the peer. Should fail if …\nPacket is intended for us\nPacket must be forwarded\nTrait defining all DB functionality needed by …\nPacket that is being sent out by us\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nProcess the incoming packet into data\nProcesses the acknowledgements for the pending tickets\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProcess the data into an outgoing packet\nTrait for linking and resolving the corresponding …\nTries to resolve on-chain public key given the off-chain …\nTries to resolve off-chain public key given the on-chain …\nPrerequisites for the ticket aggregator. The prerequisites …\nCan contain ticket statistics for a channel or aggregated …\nSelects multiple tickets with indices strictly less than …\nSelects multiple tickets with the given indices.\nSelects no ticket index specifically. This makes the …\nSelects a single ticket with the given index.\nAllows selecting a range of ticket indices in …\nDifferent markers for unredeemed tickets. See …\nAllows selecting multiple tickets (if <code>index</code> does not …\nPerforms ticket aggregation as an issuing party of the …\nAllows matching tickets on multiple channels, by adding …\nChannel ID and Epoch pairs.\nSets the stored outgoing ticket index to <code>index</code>, only if …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieve acknowledged winning tickets, according to the …\nGets the current outgoing ticket index for the given …\nRetrieves the ticket statistics for the given channel.\nRetrieve acknowledged winning tickets, according to the …\nCounts the tickets matching the given <code>selector</code> and their …\nIncrements the outgoing ticket index in the given channel …\nIf given, will select ticket(s) with the given indices in …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if this selector operates only on a single channel.\nIf <code>false</code> is returned, the selector can fetch more than a …\nSets the selector to match only tickets on the given …\nMarks tickets as the given <code>TicketMarker</code>, removing them …\nUpdates the ticket statistics according to the fact that …\nMinimum number of tickets in the channel.\nMinimum ratio between balance of unaggregated messages and …\nCreate a new ticket selector given the <code>channel_id</code> and <code>epoch</code>…\nFurther restrict to only aggregated tickets.\nCompares outgoing ticket indices in the cache with the …\nPrepare a viable collection of tickets to be aggregated.\nReplace the aggregated tickets locally with an aggregated …\nResets the outgoing ticket index to 0 for the given …\nResets the ticket statistics about neglected, rejected, …\nPerform a ticket aggregation rollback in the channel.\nFurther restriction to tickets with the given state.\nUpdates state of the tickets matching the given <code>selector</code>.\nUpdates state of the tickets matching the given <code>selector</code>.\nIf given, the tickets are further restricted to the ones …\nReturns this instance with <code>only_aggregated</code> flag value.\nReturns this instance with a ticket index set. This method …\nReturns this instance with a ticket index upper bound set. …\nReturns this instance without a ticket state set.\nReturns this instance with a ticket state set.\nReturns this instance with a winning probability upper …")