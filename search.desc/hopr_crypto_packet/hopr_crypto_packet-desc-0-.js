searchState.loadedDescShard("hopr_crypto_packet", 0, "core-packet\nImplements the overlay packet intermediary object.\nEnumerates all errors in this crate.\nImplements SPHINX packet format.\nImplements the Proof of Relay.\nImplements ticket validation logic.\nIndicates the packet type.\nPacket is intended for us\nPacket must be forwarded\nPacket that is being sent out by us\nSize of the packet including header, payload, ticket and …\nReturns the argument unchanged.\nDeserializes the packet and performs the …\nCalls <code>U::from(self)</code>.\nConstructs new outgoing packet with the given path.\nContains the error value\nContains the success value\nContains errors returned by validate_unacknowledged_ticket.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nError description.\nInvalid ticket that failed to validate.\nCurrently used ciphersuite for Sphinx\nThe content is the actual payload for the packet’s …\nRepresent a MetaPacket with one layer of encryption …\nFixed length of the Sphinx packet header.\nAn encrypted packet.\nLength of the packet including header and the payload\nThe content is another MetaPacket meant to be sent to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAttempts to remove the layer of encryption of this packet …\nCreates a new outgoing packet with given payload <code>msg</code>, <code>path</code> …\nDetermines the total length (header + payload) of the …\nReserved for SURBs. Currently not used\nContains the PoR challenge that will be solved when we …\nShared secret that was used to encrypt the removed layer.\nShared secret that was used to encrypt the removed layer.\nPublic key of the next hop.\nPacket for the next hop.\nPacket checksum.\nPacket checksum.\nPosition in the channel path of this packet.\nDecrypted payload\nProof of Relay secret length is twice the size of …\nDerivable challenge which contains the key share of the …\nContains the Proof of Relay challenge for the next …\nType that contains the challenge for the first ticket sent …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates Proof of Relay challenges from the shared …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTakes the secrets which the first and the second relayer …\nCreates instance from the shared secrets with node+2 and …\nVerifies that an incoming packet contains all values that …\nChecks if the given acknowledgement solves the given …\nChecks if the given acknowledgement solves the given …\nChecks if the given response solves the given challenge.\nPerforms validations of the given unacknowledged ticket …")