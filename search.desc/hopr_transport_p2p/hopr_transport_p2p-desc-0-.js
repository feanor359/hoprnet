searchState.loadedDescShard("hopr_transport_p2p", 0, "P2P\nNetwork Behavior definition for aggregated HOPR network …\nAggregated network behavior event inheriting the component …\nProcessed indexer generated events.\n<code>Ping</code> protocol base type for the ping operation\n<code>Ping</code> protocol base type for the pong operation\nConstants exported by the crate.\nErrors generated by the crate.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRe-export of the entire libp2p functionality\nUtilities for work with multiaddresses\nRaw swarm definition for the HOPR network.\nConnection idle timeout for all protocols used in the …\nContains the error value\nContains the success value\nAll errors raised by the crate.\nResult utilizing the P2PError as the error type.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nContains the “port” to contact. Similar to TCP or UDP, …\nRepresentation of a Multiaddr.\n<code>Protocol</code> describes all possible multiaddress protocols.\nTurn this <code>Protocol</code> into one that owns its data, thus being …\nCreate a new, empty multiaddress.\nChecks whether the given <code>Multiaddr</code> is a suffix of this …\nConvert a Multiaddr to a string\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse a single <code>Protocol</code> value from its byte slice …\nParse a protocol value from the given iterator of string …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck whether the first multiaddress protocol component is …\nReturns true if the length of this multiaddress is 0.\nCheck whether the first multiaddress protocol component …\nCheck whether the multiaddr protocol component is …\nReturns the components of this multiaddress.\nReturn the length in bytes of this multiaddress.\nPops the last <code>Protocol</code> of this multiaddr, or <code>None</code> if the …\nReturns &amp;str identifiers for the protocol names themselves.\nAdds an already-parsed address component to the end of …\nReplace a <code>Protocol</code> at some position in this <code>Multiaddr</code>.\nRemove the <code>p2p/&lt;PeerId&gt;</code> component from a multiaddress\nReturn a copy of this <code>Multiaddr</code>’s byte representation.\nLike <code>Multiaddr::push</code> but consumes <code>self</code>.\nCreate a new, empty multiaddress with the given capacity.\nAppends the given <code>PeerId</code> if not yet present at the end of …\nEncode this protocol by writing its binary representation …\nComposition of all inputs allowing to produce a single …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMain p2p loop that instantiates a new libp2p::Swarm …")