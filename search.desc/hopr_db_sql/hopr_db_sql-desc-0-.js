searchState.loadedDescShard("hopr_db_sql", 0, "Crate for accessing database(s) of a HOPR node. …\nHandle a database connection depending on the backend …\nDefines a database transaction, whether it is an open …\nShorthand for the <code>chrono</code> based timestamp type used in the …\nThe connection to the database has been severed\nConvenience trait that contain all HOPR DB operations …\nIndexer database.\nNo value.\nRepresents an already opened transaction. This is a thin …\nShorthand for optional transaction. Useful for transaction …\nNetwork peers database\nPrimary key used in tables that contain only a single row.\nSome value of type <code>T</code>.\nCreate a SQLite database connection and pool\nWhen Sqlite is used as a backend, model needs to be split …\nAcknowledged winning ticket database.\nSame as …\nCreates a new transaction.\nExplicitly close the database connection\nCommit a transaction atomically\nCommits the transaction.\nReturns reference to the database connection. Can be used …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet sqlx::SqlitePool\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSame as …\nCreates a nested transaction inside the given transaction.\nExecutes the given <code>callback</code> inside the transaction and …\nChecks if a connection to the database is still valid.\nrolls back a transaction in case error are encountered …\nRollbacks the transaction.\nSets a callback to metric this connection\nExecute the function inside a transaction. If the function …\nExecute the function inside a transaction. If the function …\nExecute the function inside a transaction with isolation …\nExecute the function inside a transaction. If the function …\nRepresents chain public key.\nA type that can represent both chain public key and packet …\nDefines DB API for accessing HOPR accounts and …\nRepresents packet public key.\nDeletes account with the given <code>key</code> (chain or off-chain).\nDeletes all address announcements for the given account.\nReturns the argument unchanged.\nRetrieves the account entry using a Packet key or Chain …\nRetrieves entries of accounts with routable address …\nRetrieves account entry about this node’s account. This …\nInserts new account entry to the database. Fails if such …\nInserts routable address announcement linked to a specific …\nCalls <code>U::from(self)</code>.\nTranslates the given Chain or Packet key to its …\nAPI for editing ChannelEntry in the DB.\nDefines DB API for accessing information about HOPR …\nStart changes to channel entry. If the channel with the …\nChange the HOPR balance of the channel.\nChange the channel epoch.\nChange the channel status.\nChange the ticket index.\nOriginal channel entry <strong>before</strong> the edits.\nCommits changes of the channel to the database.\nReturns the argument unchanged.\nRetrieves all channel information from the DB.\nRetrieves channel by its channel ID hash.\nRetrieves the channel by source and destination. This …\nFetches all channels that are <code>Incoming</code> to the given <code>target</code>…\nFetches all channels that are <code>Incoming</code> to this node. …\nFetches all channels that are <code>Incoming</code> to this node. …\nCalls <code>U::from(self)</code>.\nInserts or updates the given channel entry.\nStarts a new transaction in the given DB.\nRetrieves raw database connection to the given DB.\nReturn …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUsed only by non-SQLite code and tests.\nContains the error value\nContains the success value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEnumerates different domain separators\nDefines DB access API for various node information.\nReturns the argument unchanged.\nGets global setting value with the given key.\nGets stored Indexer data (either from the cache or from …\nRetrieves the last indexed block number.\nGets node’s Safe allowance of HOPR tokens.\nGets node’s Safe balance of HOPR tokens.\nGets node’s Safe addresses info.\nCalls <code>U::from(self)</code>.\nSets a domain separator.\nSets the global setting value with the given key.\nUpdates the last indexed block number together with the …\nSets the minimum required winning probability for incoming …\nUpdates the network registry state. To retrieve the stored …\nSets node’s Safe allowance of HOPR tokens.\nSets node’s Safe balance of HOPR tokens.\nSets node’s Safe addresses info.\nUpdates the ticket price. To retrieve the stored ticket …\nDefines DB access API for network registry operations.\nReturns <code>true</code> if the given node is allowed in network …\nReturns <code>true</code> if the given Safe is NR eligible.\nSets the given node as allowed or denied in network …\nSets or unsets Safe NR eligibility.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")