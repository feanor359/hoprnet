searchState.loadedDescShard("hopr_transport_protocol", 0, "Collection of objects and functionality allowing building …\n<code>ack</code> p2p protocol\nBloom filter for the transport layer.\nConfiguration of the protocol components.\nErrors produced by the crate.\nReturns the argument unchanged.\n<code>heartbeat</code> p2p protocol\nCalls <code>U::from(self)</code>.\n<code>msg</code> p2p protocol\n<code>ticket_aggregation</code> p2p protocol\nImplements protocol acknowledgement logic for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProcesses the incoming acknowledgement.\nProcesses the outgoing acknowledgement.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConfiguration of the P2P protocols.\nReturn …\nReturns the argument unchanged.\n<code>heartbeat</code> protocol config\nCalls <code>U::from(self)</code>.\nWinning probability that gets printed on any outgoing …\n<code>ticket_aggregation</code> protocol config\nContains the error value\nContains the success value\nErrors generated by the crate.\nResult used by the crate, based on the ProtocolError error …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConfiguration for the <code>heartbeat</code> protocol.\nReturn …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMaximum duration before the request times out\nReturn …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate an instance of a new mixer configuration\nGet a random delay duration from the specified minimum and …\nPacket is intended for us\nPacket is intended for us\nPacket must be forwarded\nPacket must be forwarded\nPacket that is being sent out by us\nPacket that is being sent out by us\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFixed price per packet to 0.01 HOPR\nConfiguration parameters for the packet interaction.\nImplements protocol acknowledgement logic for msg packets\nAwait on future until the confirmation of packet reception …\nPacket send finalizer notifying the awaiting future once …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck whether the packet is replayed using a packet tag.\nCreates a new instance given the DB and configuration.\nPushes a new packet into processing.\nConfiguration for the <code>ticket_aggregation</code> protocol.\nReturn …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMaximum duration before the request times out\nExternal API for feeding Ticket Aggregation actions into …\nSets up processing of ticket aggregation interactions and …\nEmitted by the processor background pipeline once processed\nThe input to the processor background pipeline\nPushes a new collection of tickets into the processing.\nPushes a new collection of tickets into the processing.\nGeneric type requires handwritten clone function\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new instance given the DB to process the ticket …\nProcess the received aggregation request\nPushes the aggregated ticket received from the transport …\nConstruct an infinitely running background loop producing …")