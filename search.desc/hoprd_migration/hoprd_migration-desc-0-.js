searchState.loadedDescShard("hoprd_migration", 0, "table alter add column options\nHelper for create name alias\n<code>Value</code> types variant for Postgres array\nAsterisk (“*”)\nThrown by <code>TryFrom&lt;ActiveModel&gt;</code>, which assumes all …\nBreadth first traversal during the execution of the …\nBinary operator\nUpdate column value of existing row with inserting value\nSpecification of a table column\nColumn references\nAll column specification keywords\nAll column types\nA table definition inside a WITH clause (WithClause).\nRepresents the value of an <code>Condition::any</code> or <code>Condition::all</code>…\nRepresents anything that can be passed to an <code>Condition::any</code>…\nA column\nAn expression <code>(LOWER(column), ...)</code>\nThere was a problem with the database connection\nThis error can happen when the connection pool is …\nThe generic API for a database connection that can perform …\nType error: the specified type cannot be converted from …\nA custom error\nFor recursive WithQuery WithClauses the CYCLE sql clause …\nDepth first traversal during the execution of the …\nTable identifier with database and schema prefix\nTable identifier with database and schema prefix and alias\nAn error from unsuccessful database operations\nDelete existing rows from the table\nThe DeriveIden derive macro will implement …\nThe DeriveMigrationName derive macro will implement …\nDo nothing\nAn operation did not execute successfully\nHelper to build a <code>SimpleExpr</code>.\nUpdate column value of existing row with expression\nShorthand for constructing any foreign key statement\nForeign key on update &amp; on delete actions\nCreate a foreign key constraint for an existing table. …\nDrop a foreign key constraint for an existing table\nAll available types of foreign key statement\nframe_start or frame_end clause\nFrame clause\nFrame type\nFunction call helper.\nFunctions\nFunction call.\nFunction call with alias\nIdentifier\nIdentifier\nShorthand for constructing any index statement\nCreate an index for an existing table\nDrop an index for an existing table\nAll available types of index statement\nSpecification of a table index\nInsert any new rows into an existing table\nJoin expression used in select statement\nJoin on types\nJoin types\nError occurred while parsing json value as target type\nSQL Keywords\nLike Expression\nList of lock behavior can be used in select statement\nList of lock types that can be used in select statement\nLogical chain operator\nA migration error\nThe migration definition\nSQLite does not allow writing lock tables only, and the …\nPerforming migrations on a database\nMysql query builder.\nString size\nName in <code>SelectStatement</code>\nNull Alias\nNulls order\nRepresents ON CONFLICT (upsert) actions\nRepresents ON CONFLICT (upsert) targets\nRepresents strategies to update column in ON CONFLICT …\nOrdering options\nOrder expression\nFunction call helper.\nFunctions\nPostgres query builder.\nShorthand for constructing any table query\nInline query in <code>SelectExpr</code>\nAn error occurred while performing a query\nAll available types of table query\nA thread-safe reference-counting pointer. ‘Arc’ stands …\nThe record was not found in the database\nNone of the records are inserted, that probably means all …\nNone of the records are updated, that means a WHERE …\nShorthand for constructing <code>ReturningClause</code>\nRETURNING clause.\nHelper struct for writing migration scripts in migration …\nTable identifier with schema prefix\nTable identifier with schema prefix and alias\nFor recursive WithQuery WithClauses the traversing order …\nFor recursive WithQuery WithClauses the traversing order …\nList of distinct keywords that can be used in select …\nSelect expression used in select statement\nSelect rows from an existing table\nShared lock\nRepresents a Simple Expression in SQL.\nSqlite query builder.\nLength for var-char/binary; default to 255\nSubquery with alias\nSubQuery operators\nHelper for constructing any table statement\nTable identifier without any schema / database prefix\nTable identifier with alias\nAll available table alter options\nAlter a table\nCreate a table\nAll available table drop options\nDrop a table\nSpecification of a foreign key\nSpecification of a table index\nAll available table options\nAll available table partition options\nTable references\nRename a table\nAll available types of table statement\nDrop a table\nRuntime type conversion error\nError occurred while parsing value as target type\nUnary operator\nList of union types that can be used in union clause\nAfter an insert statement it was impossible to retrieve …\nUpdate column value of existing row\nExclusive lock\nWhen updating, a model should know its primary key to check\nUpdate existing rows in the table\nValue variants\nValues list with alias\nWindow type in <code>SelectExpr</code>\nWindow expression\nA WITH clause can contain one or multiple common table …\nA WITH query. A simple SQL query that has a WITH clause (…\nA trait for writing or formatting into Unicode-accepting …\nCall <code>ABS</code> function.\nSet action WHERE\nSet action WHERE\nSet action WHERE\nExpress an arithmetic addition operation.\nPerform addition with another <code>SimpleExpr</code>.\nAdd a condition to the set.\nAdd a column to an existing table\nTry add a column to an existing table if it does not exists\nAdd a foreign key to existing table\nAdd group by expressions from vector of <code>SelectExpr</code>.\nAdd an optional condition to the set.\nSee <code>OrderedStatement::add_order_by</code>\nSee <code>OrderedStatement::add_order_by</code>\nSee <code>OrderedStatement::add_order_by</code>\nSee <code>OrderedStatement::add_order_by</code>\nAdd or replace the current alias\nExpress a <code>ALL</code> sub-query expression.\nCreate a condition that is false if any of the conditions …\nConstructs a new <code>ReturningClause::All</code>.\nMacro to easily create an <code>Condition::all</code>.\nReturns a reference to the underlying allocator.\nConstruct table <code>TableAlterStatement</code>\nExpress a logical <code>AND</code> operation.\nAnd having condition.\nSee <code>ConditionalStatement::and_or_where</code>\nSee <code>ConditionalStatement::and_or_where</code>\nSee <code>ConditionalStatement::and_or_where</code>\nAnd where condition. Calling <code>or_where</code> after <code>and_where</code> will …\nSee <code>ConditionalStatement::and_where</code>\nSee <code>ConditionalStatement::and_where</code>\nSee <code>ConditionalStatement::and_where</code>\nOptional and where, short hand for …\nSee <code>ConditionalStatement::and_where_option</code>\nSee <code>ConditionalStatement::and_where_option</code>\nSee <code>ConditionalStatement::and_where_option</code>\nExpress a <code>ANY</code> sub-query expression.\nCreate a condition that is true if any of the conditions …\nMacro to easily create an <code>Condition::any</code>.\nConstruct part of the select statement in another function.\nAppend an argument to the function call\nReplace the arguments of the function call\nSet column type as an array with a specified element type. …\nExpress a <code>AS enum</code> expression.\nProvides a raw pointer to the data.\nConverts to <code>Arc&lt;[T]&gt;</code>.\nConverts to <code>Arc&lt;T&gt;</code>.\nSet column auto increment\nCall <code>AVG</code> function.\nExpress a <code>BETWEEN</code> expression.\nSet column type as big_integer\nSet column type as big_unsigned\nCreate any binary operation\nCreate any binary operation\nSet column type as binary with default length of 1\nSet column type as binary with custom length\nSet column type as bit with variable length\nCall <code>BIT_AND</code> function, this is not supported on SQLite.\nCall <code>BIT_OR</code> function, this is not supported on SQLite.\nSet column type as blob\nSet column type as boolean\nBuild corresponding SQL statement for certain database …\nBuild corresponding SQL statement for certain database …\nSee <code>SchemaStatementBuilder::build</code>\nSee <code>SchemaStatementBuilder::build</code>\nSee <code>SchemaStatementBuilder::build</code>\nSee <code>SchemaStatementBuilder::build</code>\nSee <code>QueryStatementWriter::build</code>\nSee <code>QueryStatementWriter::build</code>\nSee <code>QueryStatementWriter::build</code>\nSee <code>QueryStatementWriter::build</code>\nSee <code>QueryStatementWriter::build</code>\nSee <code>SchemaStatementBuilder::build</code>\nSee <code>SchemaStatementBuilder::build</code>\nSee <code>SchemaStatementBuilder::build</code>\nSee <code>SchemaStatementBuilder::build</code>\nSee <code>SchemaStatementBuilder::build</code>\nBuild corresponding SQL statement for certain database …\nBuild corresponding SQL statement for certain database …\nBuild corresponding SQL statement for certain database …\nSee <code>SchemaStatementBuilder::build_any</code>\nSee <code>SchemaStatementBuilder::build_any</code>\nSee <code>SchemaStatementBuilder::build_any</code>\nSee <code>SchemaStatementBuilder::build_any</code>\nSee <code>QueryStatementBuilder::build_any</code>\nSee <code>QueryStatementBuilder::build_any</code>\nSee <code>QueryStatementBuilder::build_any</code>\nSee <code>QueryStatementBuilder::build_any</code>\nSee <code>SchemaStatementBuilder::build_any</code>\nSee <code>SchemaStatementBuilder::build_any</code>\nSee <code>SchemaStatementBuilder::build_any</code>\nSee <code>SchemaStatementBuilder::build_any</code>\nSee <code>SchemaStatementBuilder::build_any</code>\nBuild corresponding SQL statement for certain database …\nBuild corresponding SQL statement for certain database …\nSee <code>QueryStatementWriter::build_collect</code>\nSee <code>QueryStatementWriter::build_collect</code>\nSee <code>QueryStatementWriter::build_collect</code>\nSee <code>QueryStatementWriter::build_collect</code>\nSee <code>QueryStatementWriter::build_collect</code>\nBuild corresponding SQL statement for certain database …\nSee <code>QueryStatementBuilder::build_collect_any</code>\nSee <code>QueryStatementBuilder::build_collect_any</code>\nSee <code>QueryStatementBuilder::build_collect_any</code>\nSee <code>QueryStatementBuilder::build_collect_any</code>\nBuild corresponding SQL statement into the SqlWriter for …\nSee <code>QueryStatementBuilder::build_collect_any_into</code>\nSee <code>QueryStatementBuilder::build_collect_any_into</code>\nSee <code>QueryStatementBuilder::build_collect_any_into</code>\nSee <code>QueryStatementBuilder::build_collect_any_into</code>\nSee <code>QueryStatementWriter::build_collect_into</code>\nSee <code>QueryStatementWriter::build_collect_into</code>\nSee <code>QueryStatementWriter::build_collect_into</code>\nSee <code>QueryStatementWriter::build_collect_into</code>\nSee <code>QueryStatementWriter::build_collect_into</code>\nDrop option cacade\nAdds new <code>CASE WHEN</code> to existing case statement.\nAdds new <code>CASE WHEN</code> to existing case statement.\nExpress a <code>CAST AS</code> expression.\nExpress a <code>CAST AS</code> expression.\nCall <code>CAST</code> function with a custom type.\nSet column type as char\nSet column type as char with custom length\nCall <code>CHAR_LENGTH</code> function.\nSet database character set. MySQL only.\nSet constraints as SimpleExpr\nSet columnt type as cidr. This is only supported on …\nClear order expressions\nSee <code>OrderedStatement::clear_order_by</code>\nSee <code>OrderedStatement::clear_order_by</code>\nSee <code>OrderedStatement::clear_order_by</code>\nSee <code>OrderedStatement::clear_order_by</code>\nClear the select list\nMakes a clone of the <code>Arc</code> pointer.\nComparison for two <code>Arc</code>s.\nCall <code>COALESCE</code> function.\nExpress the target column without table prefix.\nSet index column\nAdd index column\nAdd a new table column\nSet database collate. MySQL only.\nSet ON CONFLICT target column\nConstructs a new <code>ReturningClause::Columns</code>.\nAdd a column to the select expression list.\nAdds a named column to the CTE table definition.\ncolumn comment\ncolumn comment\nThe keyword for setting a column to be auto increment.\nSpecify what columns to insert.\nSet ON CONFLICT target columns\nConstructs a new <code>ReturningClause::Columns</code>.\nSelect columns.\nAdds a named columns to the CTE table definition.\nMySQL only.\nSet table comment\nHaving condition, expressed with <code>any!</code> and <code>all!</code>.\nWhere condition, expressed with <code>any</code> and <code>all</code>. Calling …\nSee <code>ConditionalStatement::cond_where</code>\nSee <code>ConditionalStatement::cond_where</code>\nSee <code>ConditionalStatement::cond_where</code>\nA shorthand to express if … else … when constructing …\nExpress a <code>COUNT</code> function.\nCall <code>COUNT</code> function.\nExpress a <code>COUNT</code> function with the DISTINCT modifier.\nCall <code>COUNT</code> function with the <code>DISTINCT</code> modifier.\nConstruct foreign key <code>ForeignKeyCreateStatement</code>\nConstruct index <code>IndexCreateStatement</code>\nConstruct table <code>TableCreateStatement</code>\nCross join.\nAdd a CommonTableExpression to this with clause.\nAdd a CommonTableExpression to the with clause. See …\nKeyword <code>CURRENT_TIMESTAMP</code>.\nKeyword <code>CURRENT_TIMESTAMP</code>.\nKeyword <code>CURRENT_TIMESTAMP</code>.\nExpress any custom expression in <code>&amp;str</code>.\nCall a custom function.\nExpress any custom expression with <code>SimpleExpr</code>. Use this if …\nExpress any custom expression with <code>SimpleExpr</code>. Use this if …\nExpress any custom expression with <code>Value</code>. Use this if your …\nUse a custom type on this column.\nCustom keyword.\nFor recursive WITH queries you can specify the Cycle …\nSet the WithClause::cycle. See that method for more …\nSet column type as date\nSet column type as date_time\nSet column type as decimal\nSet column type as decimal with custom precision and scale\nDecrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nDecrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nSet default expression of a column\nCreates a new <code>Arc&lt;T&gt;</code>, with the <code>Default</code> value for <code>T</code>.\nCreates an empty <code>[T]</code> inside an Arc\nCreates an empty CStr inside an Arc\nCreates an empty str inside an Arc\nConstruct table <code>DeleteStatement</code>\nSelect distinct\nSelect distinct on for <em>POSTGRES ONLY</em>\nExpress an arithmetic division operation.\nPerform division with another <code>SimpleExpr</code>.\nSet ON CONFLICT do nothing.\nSet ON CONFLICT do nothing, but with MySQL specific …\nSet column type as double\nRollback applied migrations\nDefine actions to perform when rolling back the migration\nAttempts to downcast the <code>Arc&lt;dyn Any + Send + Sync&gt;</code> to a …\nDowncasts the <code>Arc&lt;dyn Any + Send + Sync&gt;</code> to a concrete …\nCreates a new <code>Weak</code> pointer to this allocation.\nConstruct foreign key <code>ForeignKeyDropStatement</code>\nConstruct index <code>IndexDropStatement</code>\nConstruct table <code>TableDropStatement</code>\nDrops the <code>Arc</code>.\nDrop a column from an existing table\nDrop a foreign key from existing table\nSet database engine. MySQL only.\nSet column type as enum.\nExpress an equal (<code>=</code>) expression.\nExpress an equal (<code>=</code>) expression.\nEquality for two <code>Arc</code>s.\nExpress a equal expression between two table columns, you …\nEscape a SQL string literal\nExecute a Statement\nExecute a unprepared Statement\nExpress a <code>EXISTS</code> sub-query expression.\nWrap a <code>SimpleExpr</code> and perform some operation on it.\nSet ON CONFLICT target expression\nConstructs a new <code>ReturningClause::Exprs</code>.\nAdd an expression to the select expression list.\nThe given SelectExpr must have an alias specified.\nThe expression identifying nodes.\nSelect column.\nSelect column with window function.\nSelect column with window function and label.\nSelect column with window name.\nSelect column with window name and label.\nSet multiple target expressions for ON CONFLICT. See …\nConstructs a new <code>ReturningClause::Exprs</code>.\nAdd select expressions from vector of <code>SelectExpr</code>.\nSome extra options in custom string\nRewriting extra param. You should take care self about …\nEnds the case statement with the final <code>ELSE</code> result.\nSet column type as float\nForce index hint for MySQL\nAdd a foreign key\nframe clause\nframe clause for BETWEEN frame_start AND frame_end\nframe clause for frame_start\nDrop all tables from the database, then reapply all …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert into SimpleExpr\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSet key table and columns\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFrom table.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>[T; N]</code> into an <code>Arc&lt;[T]&gt;</code>.\nAllocates a reference-counted <code>str</code> and copies <code>v</code> into it.\nConverts a <code>CString</code> into an Arc&lt;CStr&gt; by moving the <code>CString</code> …\nReturns the argument unchanged.\nConverts an <code>OsString</code> into an Arc&lt;OsStr&gt; by moving the …\nCopies the string into a newly allocated Arc&lt;OsStr&gt;.\nConverts a <code>PathBuf</code> into an Arc&lt;Path&gt; by moving the <code>PathBuf</code> …\nConverts a <code>Path</code> into an <code>Arc</code> by copying the <code>Path</code> data into …\nMove a boxed object to a new, reference-counted allocation.\nConverts a Path into a Rc by copying the Path data into a …\nConverts a <code>&amp;CStr</code> into a <code>Arc&lt;CStr&gt;</code>, by copying the contents …\nConverts an atomically reference-counted string slice into …\nConverts a <code>T</code> into an <code>Arc&lt;T&gt;</code>\nCreates an atomically reference-counted pointer from a …\nAllocates a reference-counted slice and moves <code>v</code>’s items …\nAllocates a reference-counted slice and fills it by …\nAllocates a reference-counted <code>str</code> and copies <code>v</code> into it.\nFrom table with alias.\nClears all current from clauses.\nAdd key column\nAdd key column\nFrom function call.\nTakes each element in the <code>Iterator</code> and collects it into an …\nConstructs an <code>Arc&lt;T&gt;</code> from a raw pointer.\nConstructs an <code>Arc&lt;T, A&gt;</code> from a raw pointer.\nCreate a CTE from a SelectStatement if the selections are …\nFrom sub-query.\nSpecify which table to delete from.\nSet key table\nSet key table\nShorthand for selecting from a constant value list. Panics …\nFull outer join.\nSet index as full text. On MySQL, this is <code>FULLTEXT</code>. On …\n‘Greater than or equal to’ comparison for two <code>Arc</code>s.\nCall <code>GEN_RANDOM_UUID</code> function. Postgres only.\nSets the column as generated with SimpleExpr\nGet list of applied migrations\nFetch the database backend as specified in DbBackend. This …\nGet list of migrations wrapped in <code>Migration</code> struct\nGet list of applied migrations from database\nGet list of migrations with status\nReturns a mutable reference into the given <code>Arc</code>, if there …\nReturns a mutable reference into the given <code>Arc</code>, without …\nGet list of pending migrations\nGet column values\nAdd a group by column.\nGroup by columns.\nExpress a greater than (<code>&gt;</code>) expression.\nGreater-than comparison for two <code>Arc</code>s.\nExpress a greater than or equal (<code>&gt;=</code>) expression.\nDrop table if exists\nCreate index if index not exists\nCreate table if table not exists\nExpress a <code>IF NULL</code> function.\nCall <code>IF NULL</code> function.\nIgnore index hint for MySQL\nExpress a <code>IN</code> sub-query expression.\nExpress a <code>IN</code> sub expression.\nIncrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nIncrements the strong reference count on the <code>Arc&lt;T&gt;</code> …\nAdd an index. MySQL only.\nSet index type. Not available on Sqlite.\nSet columnt type as inet. This is only supported on …\nInner join.\nConstruct table <code>InsertStatement</code>\nThe keywords for insert default row.\nWrite insert default rows expression.\nCreate migration table <code>seaql_migrations</code> in the database\nSet column type as integer\nSet column type as interval type with optional fields and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inner value, if the <code>Arc</code> has exactly one strong …\nConsumes the <code>Arc</code>, returning the wrapped pointer.\nConsumes the <code>Arc</code>, returning the wrapped pointer and …\nSee <code>QueryStatementBuilder::into_sub_query_statement</code>\nSee <code>QueryStatementBuilder::into_sub_query_statement</code>\nSee <code>QueryStatementBuilder::into_sub_query_statement</code>\nSee <code>QueryStatementBuilder::into_sub_query_statement</code>\nSpecify which table to insert into.\nExpress a <code>IS</code> expression.\nWhether or not any condition has been added\nExpress a <code>IN</code> expression.\nCheck if the connection is a test connection for the Mock …\nExpress a <code>IS NOT</code> expression.\nExpress a <code>NOT IN</code> expression.\nExpress a <code>IS NOT NULL</code> expression.\nExpress a <code>IS NULL</code> expression.\nJoin with other table by <code>JoinType</code>.\nJoin with other table by <code>JoinType</code>, assigning an alias to …\nJoin Lateral with sub-query. Not supported by SQLite.\nJoin with sub-query.\nSet column type as json.\nSet column type as json binary.\n‘Less than or equal to’ comparison for two <code>Arc</code>s.\nLeft join.\nExpress a bitwise left shift.\nHow many conditions were added\nExpress a <code>LIKE</code> expression.\nExpress a <code>LIKE</code> expression.\nLimit number of updated rows.\nLimit the number of returned rows.\nLimit number of updated rows.\nRow locking (if supported).\nExclusive row locking (if supported).\nShared row locking (if supported).\nRow locking with behavior (if supported).\nRow locking with tables (if supported).\nRow locking with tables and behavior (if supported).\nCall <code>LOWER</code> function.\nExpress a less than (<code>&lt;</code>) expression.\nLess-than comparison for two <code>Arc</code>s.\nExpress a less than or equal (<code>&lt;=</code>) expression.\nSet column type as <code>ltree</code> This is only supported on …\nSet columnt type as macaddr. This is only supported on …\nMakes a mutable reference into the given <code>Arc</code>.\nSome databases allow you to put “MATERIALIZED” or “…\nExpress a <code>MAX</code> function.\nCall <code>MAX</code> function.\nName of the migration table, it is <code>seaql_migrations</code> by …\nVector of migrations in time sequence\nExpress a <code>MIN</code> function.\nCall <code>MIN</code> function.\nModify a column in an existing table\nExpress an arithmetic modulo operation.\nSet column type as money\nSet column type as money with custom precision and scale\nExpress an arithmetic multiplication operation.\nPerform multiplication with another <code>SimpleExpr</code>.\nSet foreign key name\nSet foreign key name\nSet foreign key name\nSet index name\nSet index name\nSet index name\nExpress a not equal (<code>&lt;&gt;</code>) expression.\nExpress a not equal (<code>&lt;&gt;</code>) expression.\nInequality for two <code>Arc</code>s.\nConstruct a new foreign key\nConstruct a new <code>ForeignKeyCreateStatement</code>\nConstruct a new <code>ForeignKeyDropStatement</code>\nConstruct a new table index\nConstruct a new <code>IndexCreateStatement</code>\nConstruct a new <code>IndexDropStatement</code>\nCreates a new case statement expression\nConstruct a new <code>DeleteStatement</code>\nConstruct a new <code>InsertStatement</code>\nCreate a ON CONFLICT expression without target column, a …\nConstructs a new <code>Returning</code>.\nConstruct a new <code>SelectStatement</code>\nConstruct a new <code>UpdateStatement</code>\nConstruct a new <code>WindowStatement</code>\nConstruct a new <code>CommonTableExpression</code>\nConstructs a new empty Search.\nConstructs a new empty Cycle.\nConstructs a new WithClause.\nConstructs a new empty WithQuery.\nConstruct alter table statement\nConstruct a table column\nConstruct create table statement\nConstruct drop table statement\nConstruct rename table statement\nConstruct truncate table statement\nConstructs a new <code>Arc&lt;T&gt;</code>.\nConstructs a new <code>Arc&lt;T&gt;</code> while giving you a <code>Weak&lt;T&gt;</code> to the …\nConstructs a new <code>Arc&lt;T, A&gt;</code> in the given allocator while …\nCreate a complete Search specification from the SearchOrder…\nCreate a complete Search specification from the SearchOrder…\nConstructs a new <code>Arc&lt;T&gt;</code> in the provided allocator.\nConstructs a new <code>Arc</code> with uninitialized contents.\nConstructs a new <code>Arc</code> with uninitialized contents in the …\nConstructs a new atomically reference-counted slice with …\nConstructs a new atomically reference-counted slice with …\nConstruct a table column with column type\nConstructs a new <code>Arc</code> with uninitialized contents, with the …\nConstructs a new <code>Arc</code> with uninitialized contents, with the …\nConstructs a new atomically reference-counted slice with …\nConstructs a new atomically reference-counted slice with …\nNegates an expression with <code>NOT</code>.\nNegates an expression with <code>NOT</code>.\nNegates a condition.\nExpress a <code>NOT BETWEEN</code> expression.\nExpress a not equal expression between two table columns, …\nExpress a <code>NOT IN</code> sub-query expression.\nExpress a <code>NOT LIKE</code> expression\nExpress a <code>NOT LIKE</code> expression\nSet column not null\nSet column null\nSet nulls to not be treated as distinct values. Only …\nOffset number of returned rows.\nON CONFLICT expression\nSet on delete action\nSet on delete action\nSet on update action\nSet on update action\nExpress a logical <code>OR</code> operation.\nInsert with default values if columns and values are not …\nInsert multiple rows with default values if columns and …\nThe traversal order to be used.\nOrder by column.\nSee <code>OrderedStatement::order_by</code>\nSee <code>OrderedStatement::order_by</code>\nSee <code>OrderedStatement::order_by</code>\nSee <code>OrderedStatement::order_by</code>\nOrder by vector of columns.\nSee <code>OrderedStatement::order_by_columns</code>\nSee <code>OrderedStatement::order_by_columns</code>\nSee <code>OrderedStatement::order_by_columns</code>\nSee <code>OrderedStatement::order_by_columns</code>\nOrder by vector of columns with nulls order option.\nSee <code>OrderedStatement::order_by_columns_with_nulls</code>\nSee <code>OrderedStatement::order_by_columns_with_nulls</code>\nSee <code>OrderedStatement::order_by_columns_with_nulls</code>\nSee <code>OrderedStatement::order_by_columns_with_nulls</code>\nOrder by custom string.\nSee <code>OrderedStatement::order_by_customs</code>\nSee <code>OrderedStatement::order_by_customs</code>\nSee <code>OrderedStatement::order_by_customs</code>\nSee <code>OrderedStatement::order_by_customs</code>\nOrder by custom string with nulls order option.\nSee <code>OrderedStatement::order_by_customs_with_nulls</code>\nSee <code>OrderedStatement::order_by_customs_with_nulls</code>\nSee <code>OrderedStatement::order_by_customs_with_nulls</code>\nSee <code>OrderedStatement::order_by_customs_with_nulls</code>\nOrder by <code>SimpleExpr</code>.\nSee <code>OrderedStatement::order_by_expr</code>\nSee <code>OrderedStatement::order_by_expr</code>\nSee <code>OrderedStatement::order_by_expr</code>\nSee <code>OrderedStatement::order_by_expr</code>\nOrder by <code>SimpleExpr</code> with nulls order option.\nSee <code>OrderedStatement::order_by_expr_with_nulls</code>\nSee <code>OrderedStatement::order_by_expr_with_nulls</code>\nSee <code>OrderedStatement::order_by_expr_with_nulls</code>\nSee <code>OrderedStatement::order_by_expr_with_nulls</code>\nOrder by column with nulls order option.\nSee <code>OrderedStatement::order_by_with_nulls</code>\nSee <code>OrderedStatement::order_by_with_nulls</code>\nSee <code>OrderedStatement::order_by_with_nulls</code>\nSee <code>OrderedStatement::order_by_with_nulls</code>\nPartial comparison for two <code>Arc</code>s.\nPartition by column.\nConstruct a new <code>WindowStatement</code> with PARTITION BY column\nPartition by vector of columns.\nConstruct a new <code>WindowStatement</code> with PARTITION BY custom\nPartition by custom string.\nCall <code>PHRASE_TO_TSQUERY</code> function. Postgres only.\nConstructs a new <code>Pin&lt;Arc&lt;T&gt;&gt;</code>. If <code>T</code> does not implement <code>Unpin</code>…\nConstructs a new <code>Pin&lt;Arc&lt;T, A&gt;&gt;</code> in the provided allocator. …\nThe type of placeholder the builder uses for values, and …\nCall <code>PLAIN_TO_TSQUERY</code> function. Postgres only.\nTranslate <code>BinOper</code> into SQL statement.\nTranslate <code>CaseStatement</code> into SQL statement.\nTranslate the check constraint into SQL statement\nTranslate <code>ColumnDef</code> into SQL statement.\nTranslate <code>ColumnDef</code> into SQL statement.\nTranslate <code>ColumnSpec</code> into SQL statement.\nTranslate <code>ColumnType</code> into SQL statement.\nWrite <code>Value</code> inline.\nWrite FALSE constant\nWrite TRUE constant\nTranslate IF NOT EXISTS expression in <code>TableCreateStatement</code>.\nTranslate LIMIT expression in <code>DeleteStatement</code>.\nTranslate ORDER BY expression in <code>DeleteStatement</code>.\nTranslate <code>DeleteStatement</code> into SQL statement.\nTranslate <code>Order::Field</code> into SQL statement\nTranslate <code>ForeignKeyAction</code> into SQL statement.\nTranslate <code>ForeignKeyCreateStatement</code> into SQL statement.\nTranslate <code>ForeignKeyDropStatement</code> into SQL statement.\nTranslate <code>Function</code> into SQL statement.\nTranslate the generated column into SQL statement\nTranslate <code>IndexCreateStatement</code> into SQL statement.\nTranslate <code>IndexDropStatement</code> into SQL statement.\nTranslate [<code>IndexHint</code>] into SQL statement.\nTranslate <code>InsertStatement</code> into SQL statement.\nTranslate <code>JoinExpr</code> into SQL statement.\nTranslate <code>JoinOn</code> into SQL statement.\nTranslate <code>JoinType</code> into SQL statement.\nTranslate <code>Keyword</code> into SQL statement.\nTranslate <code>LogicalChainOper</code> into SQL statement.\nTranslate <code>Order</code> into SQL statement.\nTranslate <code>OrderExpr</code> into SQL statement.\nTranslate <code>QueryStatement</code> into SQL statement.\nTranslate <code>SelectDistinct</code> into SQL statement.\nTranslate <code>SelectExpr</code> into SQL statement.\nTranslate <code>LockType</code> into SQL statement.\nTranslate <code>SelectStatement</code> into SQL statement.\nTranslate <code>SimpleExpr</code> into SQL statement.\nTranslate <code>SubQueryOper</code> into SQL statement.\nTranslate <code>TableAlterStatement</code> into SQL statement.\nTranslate <code>TableCreateStatement</code> into SQL statement.\nTranslate <code>TableDropOpt</code> into SQL statement.\nTranslate <code>TableDropStatement</code> into SQL statement.\nTranslate <code>IndexCreateStatement</code> into SQL expression. This …\nTranslate <code>TableOpt</code> into SQL statement.\nDefault function\nTranslate <code>TablePartition</code> into SQL statement.\nTranslate <code>TableRef</code> into SQL statement.\nTranslate <code>TableRef</code> into SQL statement.\nTranslate <code>TableRef</code> that without values into SQL statement.\nTranslate <code>TableRef</code> into SQL statement.\nTranslate <code>TableRef</code> into SQL statement.\nTranslate <code>TableRenameStatement</code> into SQL statement.\nTranslate <code>TableTruncateStatement</code> into SQL statement.\nTranslate <code>SimpleExpr::Tuple</code> into SQL statement.\nTranslate <code>UnOper</code> into SQL statement.\nTranslate LIMIT expression in <code>UpdateStatement</code>.\nTranslate ORDER BY expression in <code>UpdateStatement</code>.\nTranslate <code>UpdateStatement</code> into SQL statement.\nWrite <code>Value</code> into SQL statement as parameter.\nTranslate a <code>&amp;[ValueTuple]</code> into a VALUES list.\nSet index as primary\nSet column as primary key\nAdd an primary key.\nReturns <code>true</code> if the two <code>Arc</code>s point to the same allocation …\nSet the query generating the CTE content. The query’s …\nYou can turn this into a WithQuery using this function. …\nSet the query that you execute with the WithClause.\nExecute a Statement and return a collection Vec&lt;QueryResult…\nExecute a Statement and return a query\nThe type of quote the builder uses.\nCall <code>RANDOM</code> function.\nSets whether this clause is a recursive with clause of not.\nSet the WithClause::recursive. See that method for more …\nRollback all applied migrations, then reapply all …\nConstruct table <code>TableRenameStatement</code>\nRename a column in an existing table\nUse REPLACE instead of INSERT\nRollback all applied migrations\nReset limit\nReset offset\nDrop option restrict\nRETURNING expressions.\nRETURNING expressions.\nRETURNING expressions.\nConstruct <code>Returning</code>\nRETURNING expressions all columns.\nRETURNING expressions all columns.\nRETURNING expressions all columns.\nRETURNING expressions for a column.\nRETURNING expressions for a column.\nRETURNING expressions for a column.\nRight join.\nExpress a bitwise right shift.\nCall <code>ROUND</code> function.\nCall <code>ROUND</code> function with the precision.\nConvert value to json value\nFor recursive WITH queries you can specify the Search …\nAdd the WithClause::search. See that method for more …\nConstruct table <code>SelectStatement</code>\nSpecify a select query whose values to be inserted.\nThe name of the boolean column containing whether we have …\nSet column type as small_integer\nSet column type as small_unsigned\nExpress a <code>SOME</code> sub-query expression.\nConvert generic DbErr by sqlx to SqlErr, return none if …\nCall <code>STARTS_WITH</code> function. Postgres only.\nCheck the status of all migrations\nSet column type as string\nSet column type as string with custom length\nGets the number of strong (<code>Arc</code>) pointers to this …\nExpress an arithmetic subtraction operation.\nPerform subtraction with another <code>SimpleExpr</code>.\nExpress a <code>SUM</code> function.\nCall <code>SUM</code> function.\nCheck if the connection supports <code>RETURNING</code> syntax on …\nSet key table and referencing table\nSet target table\nSet target table\nSpecify which table to update.\nSet table name\nSet table name\nSet table name\nSet old and new table name\nSet table name\nSets the CTE table name of the query.\nTake the ownership of data in the current <code>SelectStatement</code>\nSet target WHERE\nSet target WHERE\nSet target WHERE\nSet column type as text\nSet column type as time\nSet column type as timestamp\nSet column type as timestamp with time zone. Postgres only\nSet column type as tiny_integer\nSet column type as tiny_unsigned\nSet referencing table and columns\nAdd referencing column\nAdd referencing column\nBuild corresponding SQL statement for certain database …\nBuild corresponding SQL statement for certain database …\nSee <code>SchemaStatementBuilder::to_string</code>\nSee <code>SchemaStatementBuilder::to_string</code>\nSee <code>SchemaStatementBuilder::to_string</code>\nSee <code>SchemaStatementBuilder::to_string</code>\nSee <code>QueryStatementWriter::to_string</code>\nSee <code>QueryStatementWriter::to_string</code>\nSee <code>QueryStatementWriter::to_string</code>\nSee <code>QueryStatementWriter::to_string</code>\nSee <code>QueryStatementWriter::to_string</code>\nSee <code>SchemaStatementBuilder::to_string</code>\nSee <code>SchemaStatementBuilder::to_string</code>\nSee <code>SchemaStatementBuilder::to_string</code>\nSee <code>SchemaStatementBuilder::to_string</code>\nSee <code>SchemaStatementBuilder::to_string</code>\nBuild corresponding SQL statement for certain database …\nSet referencing table\nSet referencing table\nCall <code>TO_TSQUERY</code> function. Postgres only.\nCall <code>TO_TSVECTOR</code> function. Postgres only.\nConstruct table <code>TableTruncateStatement</code>\nConstructs a new <code>Arc&lt;T&gt;</code>, returning an error if allocation …\nConstructs a new <code>Arc&lt;T, A&gt;</code> in the provided allocator, …\nConstructs a new <code>Arc</code> with uninitialized contents, …\nConstructs a new <code>Arc</code> with uninitialized contents, in the …\nConstructs a new <code>Arc</code> with uninitialized contents, with the …\nConstructs a new <code>Arc</code> with uninitialized contents, with the …\nConstructs a new <code>Pin&lt;Arc&lt;T&gt;&gt;</code>, return an error if …\nConstructs a new <code>Pin&lt;Arc&lt;T, A&gt;&gt;</code> in the provided allocator, …\nSet up the columns of the CTE to match the given …\nReturns the inner value, if the <code>Arc</code> has exactly one strong …\nCall <code>TS_RANK</code> function. Postgres only.\nCall <code>TS_RANK_CD</code> function. Postgres only.\nWraps tuple of <code>SimpleExpr</code>, can be used for tuple comparison\nUnescape a SQL string literal\nUnion with another SelectStatement that must have the same …\nUnion with multiple SelectStatement that must have the …\nSet index as unique\nSet column unique constraint\nSet column type as unsigned\nIf we have the only reference to <code>T</code> then unwrap it. …\nDefine actions to perform when applying the migration\nApply pending migrations\nConstruct table <code>UpdateStatement</code>\nSet ON CONFLICT update column\nSet ON CONFLICT update columns\nCall <code>UPPER</code> function.\nUse index hint for MySQL\nThe name of the array typed column that contains the node …\nSet column type as uuid\nExpress a <code>Value</code>, returning a <code>Expr</code>.\nExpress a <code>Value</code>, returning a <code>SimpleExpr</code>.\nSet ON CONFLICT update value\nUpdate column value by <code>SimpleExpr</code>.\nConvert a SQL value into syntax-specific string\nSpecify a row of values to be inserted.\nSet ON CONFLICT update exprs\nUpdate column values. To set multiple column-value pairs …\nAdd rows to be inserted from an iterator, variation of …\nPrefix for tuples in VALUES list (e.g. ROW for Mysql)\nSpecify a row of values to be inserted, variation of …\nSet column type as binary with variable length\nSet column type as varbit with variable length\nGets the number of <code>Weak</code> pointers to this allocation.\nCall <code>WEBSEARCH_TO_TSQUERY</code> function. Postgres only.\nWINDOW\nCreate a WithQuery by specifying a WithClause to execute …\nCreate a WithQuery by specifying a WithClause to execute …\nCreate a WithQuery by specifying a WithClause to execute …\nCreate a WithQuery by specifying a WithClause to execute …\nConstruct <code>WithClause</code>\nSet the whole WithClause.\nWrites a <code>char</code> into this writer, returning whether the …\nGlue for usage of the <code>write!</code> macro with implementors of …\nWrites a string slice into this writer, returning whether …\nSet column type as year Only MySQL supports year\nFrom type\nInto type\nTryError\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nArity of the Primary Key\nAccess mode\nA Rust representation of enum defined in database.\nThe Rust Value backing ActiveEnums\nA Trait for overriding the ActiveModel behavior\nA Trait for ActiveModel to perform Create, Update or …\nDefines a stateful value used in ActiveModel.\nError occurred within the <code>Any</code> driver mapping to/from the …\nRepresents a JSON array.\nThrown by <code>TryFrom&lt;ActiveModel&gt;</code>, which assumes all …\nColumn identifier consists of 2 columns\nRepresents a JSON boolean.\nColumn Index, used by <code>TryGetable</code>. Implemented for <code>&amp;str</code> and …\nError occurred while decoding a value from a specific …\nDefines a Column for an Entity\nError during <code>impl FromStr for Entity::Column</code>\nColumn index was out of bounds.\nNo column found for the given name.\nAPI for working with a <code>Column</code>. Mostly a wrapper of the …\nAll column types\nSeaORM’s utility methods that act on ColumnType\nRepresents the value of an <code>Condition::any</code> or <code>Condition::all</code>…\nError occurred while parsing a connection string.\nThe INSERT operation did not insert any valid value\nThere was a problem with the database connection\nConnection Acquire error\nDefines the configuration options of a database\nA Database connection error\nThis error can happen when the connection pool is …\nConnection closed\nThe generic API for a database connection that can perform …\nType error: the specified type cannot be converted from …\nCursor pagination\nA trait for any type that can be turn into a cursor\nA custom error\nDefines a database\nError returned from the database.\nThe type of database backend for real world databases. …\nHandle a database connection depending on the backend …\nDefines a database transaction, whether it is an open …\nThe same as DatabaseBackend just shorter :)\nThe same as a DatabaseConnection\nAn error from unsuccessful database operations\nA database error was encountered as defined in crate::DbErr\nThis structure provides debug capabilities\nError occurred while decoding a value.\nDefines the structure for a delete operation\nPerform a delete operation on multiple models\nPerform a delete operation on a model\nThe result of a DELETE operation\nHandles DELETE operations in a ActiveModel using …\nA derive macro to implement <code>sea_orm::ActiveEnum</code> trait for …\nThe DeriveActiveModel derive macro will implement …\nModels that a user can override\nThe DeriveColumn derive macro will implement [ColumnTrait] …\nDerive a column if column names are not in snake-case\nCreate an Entity\nThis derive macro is the ‘almighty’ macro which …\nThe DeriveIden derive macro will implement …\nDerive into an active model\nThe DeriveMigrationName derive macro will implement …\nThe DeriveModel derive macro will implement ModelTrait for …\nThe DerivePartialModel derive macro will implement …\nThe DerivePrimaryKey derive macro will implement […\nThe DeriveRelatedEntity derive macro will implement …\nThe DeriveRelation derive macro will implement …\nImplements traits for types that wrap a database value …\nThe connection to the database has been severed\nThe connection to the database has been severed\nThe INSERT statement did not have any value to insert\nThe Entity this ActiveModel belongs to\nA Trait for mapping an Entity to a database table\nEntity, or a Select; to be used as parameters in …\nAn abstract base class for defining Entities.\nCreates a new type that iterates of the variants of an …\nAn operation did not execute successfully\nDefines the result of executing an operation\nAction to perform on a foreign key whenever there are …\nError for Foreign key constraint\nA Trait for implementing a QueryResult\nConvert a query result into the corresponding Model.\nAn Entity has many relationships\nAn Entity has one relationship\nIdentifier\nEnsure the identifier for an Entity can be converted to a …\nList of column identifier\nCheck the Identity of an Entity\nPerforms INSERT operations on a ActiveModel\nThe result of an INSERT operation on an ActiveModel\nSuccessfully inserted\nDefines a structure to perform INSERT operations in an …\nError generated from within SeaORM\nA Trait for any type that can be converted into an …\nAny type that can be converted into an ActiveValue\nPerforms a conversion into an Identity\nPerforms a conversion to SimpleExpr\nError communicating with the database backend.\nIsolation level\nDefine a structure containing the numbers of items and …\nThis trait designates that an <code>Enum</code> can be iterated over. …\nJoin types\nError occurred while parsing json value as target type\nRepresents any valid JSON value.\nSame as RelationDef\nA Trait for links between Entities\nThis trait implements the Data Loader API\nColumn identifier consists of more than 3 columns\nA migration error\nSource model\nA Trait for a Model\nA MySQL backend\nA MySQL backend\nAn undefined Value\nRepresents a JSON null value.\nA null value was encountered\nRepresents a JSON number, whether integer or floating …\nRepresents a JSON object.\nOrdering options\nDefined a structure to handle pagination of a result from …\nA Trait for any type that can paginate results\nA trait for a part of Model\nPin a Model so that stream operations can be performed on …\n<code>Pool::close</code> was called while we were waiting in …\nA <code>Pool::acquire</code> timed out due to connections not becoming …\nA PostgreSQL backend\nA PostgreSQL backend\nHow many columns this Primary Key comprises\nHow to map a Primary Key to a column\nA Trait for to be used to define a Primary Key.\nUnexpected or invalid data encountered while communicating …\nAn error occurred while performing a query\nPerform a FILTER opertation on a statement\nPerforms ORDER BY operations\nDefines the result of a query operation on a Model\nAbstract API for performing queries\nConstrain the QueryStatement to QueryStatementBuilder trait\nThe self-referencing struct.\nA Trait for any type performing queries on a Model or …\nEach consistent read, even within the same transaction, …\nData can’t be modified in this transaction\nSELECT statements are performed in a nonlocking fashion, …\nData can be modified in this transaction (default)\nThe record was not found in the database\nNone of the records are inserted, that probably means all …\nNone of the records are updated, that means a WHERE …\nChecks if Entities are related\nDefines a helper to build a relation\nDefines a relationship\nDefines the relations of an Entity\nDefines the type of relationship\nConsistent reads within the same transaction read the …\nNo rows returned by a query that expected to return at …\nRuntime error\nThis is a helper struct to convert <code>EntityTrait</code> into …\nDefines a structure to perform select operations\nImplements the traits Iden and IdenStatic for a type\nImplements the traits Iden and IdenStatic for a type\nSelect specific column for partial model queries\nGet tuple from query result based on column index\nGet tuple from query result based on a list of column …\nDefines a type to get a Model\nDefines a structure to perform a SELECT operation on two …\nDefines a structure to perform a SELECT operation on many …\nDefines a type to get two Models\nDefines a type to do <code>SELECT</code> operations through a …\nSelect operation\nSelect operation\nPerforms a raw <code>SELECT</code> operation on a model\nA Trait for any type that can perform SELECT queries\nAll statements of the current transaction can only see …\nDefines a set operation on an ActiveValue\nA defined Value actively being set\nAn error from unsuccessful SQL query\nA SQLite backend\nA SQLite backend\nRepresents all the ways a method can fail within SQLx.\nSQLx Error\nDefines the sqlx::sqlite connector\nType surrogate\nDefines a sqlx SQLite pool\nCreate a SQLite database connection and pool\nCreate a SQLite database connection and pool\nDefines an SQL statement\nAny type that can build a Statement\nCreate a stream for the QueryResult\nStream query results\nRepresents a JSON string.\nColumn identifier consists of 3 columns\nConnection pool timed out\nError occurred while attempting to establish a TLS …\nAn error occurring when doing database transactions\nDefines errors for handling transaction failures\nThe self-referencing struct.\nSpawn database transaction\nTry to convert a type to a u64\nAn error from trying to get a row from a Model\nAn interface to get a value from the query result\nAn interface to get an array of values from the query …\nAn interface to get a JSON from the query result\nAn interface to get a tuple value from the query result\nPerforms INSERT operations on a ActiveModel, will do …\nThe types of results for an INSERT operation\nRuntime type conversion error\nA Trait for any type that can be converted into an Model\nError occurred while parsing value as target type\nType in query doesn’t exist. Likely due to typo or …\nColumn identifier consists of 1 column\nDefines an unchanged operation on an ActiveValue\nA defined Value remain unchanged\nError for duplicate record in unique field or primary key …\nAfter an insert statement it was impossible to retrieve …\nDefines an not set operation on an ActiveValue\nDefines a structure to perform UPDATE query operations on …\nWhen updating, a model should know its primary key to check\nDefines an UPDATE operation on multiple ActiveModels\nDefines an UPDATE operation on one ActiveModel\nThe result of an update operation on an ActiveModel\nDefines an update operation\nValue variants\nDefine the Rust type that each enum variant corresponds.\nThis has no purpose. It will be removed in the next major …\nA background worker has crashed.\nCheck if the URI provided corresponds to <code>sqlite:</code> for a …\nSet the maximum amount of time to spend waiting for …\nAdd a Model to Self\nAdd many Models to Self\nFilter paginated result with corresponding column greater …\nWill be called after <code>ActiveModel::delete</code>\nWill be called after <code>ActiveModel::insert</code>, …\nFetch the paginated result\nGet all items from the Select query\nGet all items from the Select query\nGet all Models from the SELECT query\nGet all Models from the Select query\nGet all Models from the select operation\nAnd where condition. Calling <code>or_where</code> after <code>and_where</code> will …\nOptional and where, short hand for …\nApply an operation on the QueryTrait::QueryStatement if …\nIf the <code>Value</code> is an Array, returns the associated vector. …\nIf the <code>Value</code> is an Array, returns the associated mutable …\nIf the <code>Value</code> is a Boolean, returns the associated bool. …\nget the name of the entity the column belongs to\nConstruct a enum expression with casting\nIf the <code>Value</code> is a number, represent it as f64 if possible. …\nIf the <code>Value</code> is an integer, represent it as i64 if …\nIf the <code>Value</code> is a Null, returns (). Returns None otherwise.\nIf the <code>Value</code> is a Number, returns the associated <code>Number</code>. …\nIf the <code>Value</code> is an Object, returns the associated Map. …\nIf the <code>Value</code> is an Object, returns the associated mutable …\nGet an immutable ref to the query builder\nPanics\nBasically a no-op; only to satisfy trait bounds\nMethod to call to get the static string identity\nSelf must be <code>&amp;str</code>, return <code>None</code> otherwise\nIf the <code>Value</code> is a String, returns the associated str. …\nIf the <code>Value</code> is an integer, represent it as u64 if …\nSelf must be <code>usize</code>, return <code>None</code> otherwise\nUse ascending sort order\nMethod to call to perform <code>AUTOINCREMENT</code> operation on a …\nFilter paginated result with corresponding column less …\nWill be called before <code>ActiveModel::delete</code>\nWill be called before <code>ActiveModel::insert</code>, …\nExecute SQL <code>BEGIN</code> transaction. Returns a Transaction that …\nBundle a set of SQL statements that execute together.\nExecute SQL <code>BEGIN</code> transaction with isolation level and/or …\nCheck if the relation belongs to an Entity\nApply a where condition using the model’s primary key\nPerform a check to determine table belongs to a Model …\nMethod to call in order to build a Statement\nBuild the query as <code>Statement</code>\nBuild an SQL Statement\nThis macro builds a Statement when invoked\nThis macro builds a Statement when invoked\nThis macro builds a Statement when invoked\nThis macro builds a Statement when invoked\nCheck if a record exists on the ActiveModel to perform the …\nClear order expressions\nExplicitly close the database connection\nExplicitly close the SQLite connection\nThe extended result code.\nCreates a SimpleExpr from a column\nAdd a select column\nAdd a select column with alias\nRetrieves the names of the columns in the result set\nSelect columns\nMethod to get the comment for the schema, defaults to …\nSet column comment\nCommit a transaction atomically\nWhere condition, expressed with <code>any</code> and <code>all</code>. Calling …\nSet the condition type of join on expression\nSet the condition type of join on expression\nCondition type of join on expression\nCondition type of join on expression\nMethod to create a DatabaseConnection on a database. This …\nAdd configuration options for the SQLite database\nIf set to <code>true</code>, the db connection pool will be created …\nSet the timeout duration when acquiring a connection\nSee also SeaQuery’s method with same name.\nPerform a count on the paginated results\nCreates Postgres enums from an ActiveEnum. See …\nCreates Postgres enums from an Entity. See …\nCreates the indexes from an Entity, returning an empty Vec …\nCreates a table from an Entity. See TableCreateStatement …\nGet current page number\nConvert into a cursor\nConvert into a cursor using column of first entity\nConvert into a cursor using column of second entity\nThe database backend this statement is constructed for. …\nGet the database column definition of this active enum.\nUses the <code>log</code> crate to perform logging. This must be …\nHelper to get a raw SQL string from an object that impl …\nHelper to get a <code>Statement</code> from an object that impl …\nDefine a column for an Entity\nInstantiate a new ColumnDef\nThe method to call\nThe default implementation of the ActiveModel\nCreate an ActiveValue::NotSet\nSet the default value or expression of a column\nSet the default value\nDelete an model from database\nDelete an active model by its primary key\nDelete a model\nDelete a model based on primary key\nDelete many models from database\nUse descending sort order\nAdd a DISTINCT expression\nAdd a DISTINCT ON expression NOTE: this function is only …\nAllow insert statement return safely if inserting nothing. …\nModule for the Entity type and operations\nGet the name of the entity the column belongs to\nError types for all database operations\nExecute a DELETE operation\nExecute an insert operation, returning the last inserted id\nExecute an update operation\nExecute a DELETE operation on one ActiveModel\nExecute a DELETE operation on many ActiveModels\nExecute an insert operation\nExecute an insert operation\nExecute an update operation on an ActiveModel\nExecute an update operation on multiple ActiveModels\nExecute an insert operation and return the inserted model …\nExecute an insert operation and return the inserted model …\nExecute an insert operation and return the inserted model …\nExecute an update operation and return the updated model …\nExecute an insert operation\nExecute an insert operation without returning (don’t use …\nExecute an insert operation without returning (don’t use …\nExecute a Statement\nExecute a Statement on a SQLite backend\nExecute a unprepared Statement\nExecute an unprepared SQL statement on a SQLite backend\nAdd an expression to the select expression list.\nSelect column.\nSame as <code>expr_as</code>. Here for legacy reasons.\nAdd select expressions from vector of <code>SelectExpr</code>.\nFetch the current page\nFetch one page and increment the page counter\nFetch a specific page; page index starts from zero\nAdd an AND WHERE expression\nConstruct select statement to find one / all models\nLeft Join with a Linked Entity and select both Entity.\nLeft Join with a Related Entity and select both Entity.\nFind a model by primary key\nFind all the Entities that are linked to the Entity\nFind linked Models\nFind related Entities\nFind related Models\nLeft Join with a Linked Entity and select Entity as a <code>Vec</code>.\nLeft Join with a Related Entity and select the related …\nLimit result set to only first N rows in ascending order …\nSet the name of foreign key constraint\nThe name of foreign key constraint\nThe name of foreign key constraint\nDisplay a JSON value as a string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild a relationship from an Entity\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert map (with string keys) to <code>Value::Object</code>.\nConvert boolean to <code>Value::Bool</code>.\nConvert 64-bit floating point number to <code>Value::Number</code>, or …\nConvert 32-bit floating point number to <code>Value::Number</code>, or …\nConvert <code>()</code> to <code>Value::Null</code>.\nConvert <code>String</code> to <code>Value::String</code>.\nConvert string slice to <code>Value::String</code>.\nReturns the argument unchanged.\nConvert copy-on-write string to <code>Value::String</code>.\nConvert <code>Number</code> to <code>Value::Number</code>.\nConvert a <code>Vec</code> to <code>Value::Array</code>.\nConvert a slice to <code>Value::Array</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nExpress the relation from a table alias.\nReference to from a Column\nReference to from a Column\nMethod to map a primary key from a column in an Entity\nCreate a <code>Value::Object</code> by collecting an iterator of …\nCreate a <code>Value::Array</code> by collecting an iterator of array …\nCreate ActiveModel from a JSON value\nGet a Vec from an Array of Json\nInstantiate a Model from a QueryResult\nTransform the error from instantiating a Model from a …\nThe method to perform a query on a Model\nPerform a Select operation on a Model using a Statement\nCreate a SQL statement from a crate::DatabaseBackend, a …\nInstantiate a sqlx pool connection to a DatabaseConnection\nSelect a custom Model from a raw SQL Statement.\nCreate a Statement from a crate::DatabaseBackend and a raw …\nReference from another Entity\nReference from another Entity\nGet a immutable ActiveValue from an ActiveModel\nGet the Value of a column from an Entity\nIndex into a JSON array or map. A string index can be used …\nGet the maximum amount of time to spend waiting for …\nCreates a column definition for example to update a table.\nGet ColumnType as reference\nGet whether DB connections will be established when the …\nGet the timeout duration when acquiring a connection, if …\nFetch the database backend as specified in DbBackend. This …\nGet the name of the enum if this is a enum column\nGet the idle duration before closing a connection, if set\nGet the maximum number of connections of the pool, if set\nGet the maximum lifetime of individual connections, if set\nGet the minimum number of connections of the pool, if set\nMutably index into a JSON array or map. A string index can …\nGet the primary key of the ActiveModel\nA helper for building SQL queries\nGet sqlx::SqlitePool\nGet whether SQLx statement logging is enabled\nGet the level of SQLx statement logging\nGet the SQLx slow statements logging settings\nGet the database URL of the pool\nAdd a group by column\nCheck if the Entity has many relations\nCheck if the entity has at least one relation\nAdd an AND HAVING expression\nMethod to call to perform this check\nSet the idle duration before closing a connection\nPerform an operation if the column is null\nIndex into a <code>serde_json::Value</code> using the syntax <code>value[0]</code> or\nWrite into a <code>serde_json::Value</code> using the syntax …\nSet the <code>indexed</code> field  to <code>true</code>\nInner Join with a Related Entity.\nInsert an model into database\nPerform an <code>INSERT</code> operation on the ActiveModel\nInsert many models into database\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMethod to call to perform the conversion\nMethod to perform the conversion\nMethod to map a primary key to a column in an Entity\nConstruct a <code>SimpleExpr::Column</code> wrapped in <code>Expr</code>.\nMethod to perform the conversion\nConstruct a Cursor that fetch JSON value\nGet a selectable Model as a JsonValue for SQL JSON …\nConvert the Models into JsonValue\nConvert the results to JSON\nConstruct a Cursor that fetch any custom struct\nReturn a Selector from <code>Self</code> that wraps a SelectModel\nPerform a conversion into a SelectTwoModel\nReturn a [Selector] from <code>Self</code> that wraps a SelectModel …\nReturn a Selector from <code>Self</code> that wraps a SelectModel with …\nPerform a conversion into a SelectTwoModel with …\nTake ownership of the query builder\nConstruct a returning <code>Expr</code>.\nMethod to perform the conversion\nGet the SQL statement\nGet the SQL statement\nConvert self into an async stream\nGet tuple from query result based on column index\nConvert an owned enum variant into the corresponding value.\nCheck if a Value exists or not\nWrap the Value into a <code>ActiveValue&lt;Value&gt;</code>\nReturns true if the <code>Value</code> is an Array. Returns false …\nReturns true if the <code>Value</code> is a Boolean. Returns false …\nReturn <code>true</code> if any attribute of <code>ActiveModel</code> is <code>Set</code>\nReturns true if the <code>Value</code> is a number that can be …\nReturns true if the <code>Value</code> is an integer between <code>i64::MIN</code> …\nCheck if the connection is a test connection for the Mock …\nSee also SeaQuery’s method with same name.\nCheck the state of a ActiveValue\nCheck if the ActiveValue is ActiveValue::NotSet\nSee also SeaQuery’s method with same name.\nReturns true if the <code>Value</code> is a Null. Returns false …\nReturns true if the column is nullable\nReturns true if the <code>Value</code> is a Number. Returns false …\nReturns true if the <code>Value</code> is an Object. Returns false …\nDefines the owner of the Relation\nDefines the owner of the Relation\nCheck if the URI is the same as the specified database …\nCheck if the ActiveValue is ActiveValue::Set\nReturns true if the <code>Value</code> is a String. Returns false …\nReturns true if the <code>Value</code> is an integer between zero and …\nCheck if the ActiveValue is ActiveValue::Unchanged\nJoin via <code>RelationDef</code>.\nJoin via <code>RelationDef</code> with table alias.\nJoin via <code>RelationDef</code> with table alias but in reverse …\nJoin via <code>RelationDef</code> but in reverse direction. Assume when …\nLimit result set to only last N rows in ascending order of …\nGet the last id after <code>AUTOINCREMENT</code> is done on the primary …\nThe id performed when AUTOINCREMENT was performed on the …\nLeft Join with a Related Entity.\nAdd a limit expression. Passing in None would remove the …\nLink for an Entity\nUsed to eager load has_many relations\nUsed to eager load many_to_many relations\nUsed to eager load has_one relations\nSelect lock\nSelect lock exclusive\nSelect lock shared\nRow locking with behavior (if supported).\nDelete many ActiveModel\nInsert many Model or ActiveModel\nUpdate many ActiveModel\nSee also SeaQuery’s method with same name.\nSet the maximum number of connections of the pool\nSet the maximum lifetime of individual connections\nHolds types and methods to perform metric collection\nSee also SeaQuery’s method with same name.\nSet the minimum number of connections of the pool\nGet the name of the module from the invoking …\nGet the name of enum\nCreate new ConnectOptions for a Database by passing in a …\nCreate a new ActiveModel with default values. Also used by …\nCreate a new cursor\nInstantiate a new Deleter by passing it a DeleteStatement\nInstantiate a new insert operation\nInstantiate an update using an UpdateStatement\nCreate a helper for a specific database backend\nIncrement the page counter\nSet the state of an ActiveValue to the not set state\nCreate an ActiveValue::NotSet\nMark the column as nullable\nMark the column as nullable\nGet the total number of items\nGet the total number of items and pages\nGet the total number of pages\nThe total number of items of a paginator\nThe total number of pages of a paginator\nAdd an offset expression. Passing in None would remove the …\nSet custom join ON condition.\nSet custom join ON condition.\nCustom join ON condition\nCustom join ON condition\nOn conflict\nSet ON CONFLICT on primary key do nothing, but with MySQL …\nAn operation to perform on a foreign key when a delete …\nDefines an operation to be performed on a Foreign Key when …\nDefines an operation to be performed on a Foreign Key when …\nalias to do_nothing\nAn operation to perform on a foreign key when an update …\nDefines an operation to be performed on a Foreign Key when …\nDefines an operation to be performed on a Foreign Key when …\nGet an item from the Select query\nGet an item from the Select query\nDelete one Model or ActiveModel\nInsert one Model or ActiveModel\nGet one Model from the SELECT query\nGet one Model from the Select query\nUpdate one ActiveModel\nOrder by column.\nAdd an order_by expression\nAdd an order_by expression (ascending)\nOrder by vector of columns.\nOrder by vector of columns with nulls order option.\nOrder by custom string.\nOrder by custom string with nulls order option.\nAdd an order_by expression (descending)\nOrder by <code>SimpleExpr</code>.\nOrder by <code>SimpleExpr</code> with nulls order option.\nOrder by column with nulls order option.\nAdd an order_by expression with nulls ordering option\nPaginate the result of a select operation.\nChecks if a connection to the database is still valid.\nChecks if a connection to the database is still valid.\nLooks up a value by a JSON Pointer.\nLooks up a value by a JSON Pointer and returns a mutable …\nHolds types and methods to perform queries\nAdd the select SQL statement\nAdd the query to perform an ORDER BY operation\nAdd the query to perform a FILTER on\nGet a mutable ref to the query builder\nThe query to debug\nExecute a Statement and return a collection Vec&lt;QueryResult…\nGet the results of a query returning them as a Vec&lt;…\nExecute a Statement and return a query\nGet one result from a SQL query. Returns Option::None if …\nThe type of relationship defined in RelationType\nThe type of relationship defined in RelationType\nReset the value from ActiveValue::Unchanged to …\nReset the value from ActiveValue::Unchanged to …\nReset all values from ActiveValue::Unchanged to …\nReverse this relation (swap from and to)\nJoin with an Entity Related to me.\nRight Join with a Related Entity.\nrolls back a transaction in case error are encountered …\nGet the number of rows affected by the operation\nThe number of rows affected by the DELETE operation\nThe rows affected by the update operation\nInsert the model if primary key is <code>NotSet</code>, update …\nCast value of a column into the correct type for database …\nCast value of an enum column as enum type; do nothing if …\nHolds types that defines the schemas of an Entity\nMethod to get the name for the schema, defaults to …\nIf self is Entity, use Entity::find()\nSelects and Entity and returns it together with the Entity …\nCast column expression used in select statement. It only …\nSelect specific columns this [PartialModel] needs\nAdd a select column\nAdd a select column with alias\nCast enum column as text; do nothing if <code>self</code> is not an …\nClear the selection list\nMakes a SELECT operation in conjunction to another relation\nSet the Value into an ActiveModel\nSet the Value of a column in an Entity\nCreate an ActiveValue::Set\nAdd the models to update to Self\nSet the corresponding attributes in the ActiveModel from a …\n<code>Set(value)</code>, except when <code>self.is_unchanged()</code> and <code>value</code> …\nSets a callback to metric this connection\nSet schema search path (PostgreSQL only)\nSet the cursor ordering for another table when dealing …\nThe SQL query\nset key for sqlcipher\nEnable SQLx statement logging (default true)\nSet SQLx statement logging level (default INFO). (ignored …\nConvert ConnectOptions into sqlx::pool::PoolOptions\nSet SQLx slow statements logging level and duration …\nExecute a Statement and return a stream of results\nStream the results of executing a SQL query\nStream the results of the Select operation\nStream the results of the Select operation\nStream the results of a SELECT operation on a Model\nStream the results of a Select operation on a Model\nStream the result of the operation\nStream the result of the operation with PartialModel\nStream the result of the operation with PartialModel\nStream the result of the operation with PartialModel\nSee also SeaQuery’s method with same name.\nCheck if the connection supports <code>RETURNING</code> syntax on …\nCheck if the database supports <code>RETURNING</code> syntax on insert …\nGet the name of the table\nGet the TableRef from invoking the <code>self.schema_name()</code>\nGet a mutable ActiveValue from an ActiveModel\nTakes the value out of the <code>Value</code>, leaving a <code>Null</code> in its …\nGet the mutable value an ActiveValue also setting itself …\nShorthand of <code>expr_as(Expr::col((T, C)), A)</code>.\nIf true, the connection will be pinged upon acquiring from …\nCheck if an entity is related to another entity\nBuild a relationship to an Entity\nReference to another column\nReference to another column\nReference to another ENtity\nReference to another ENtity\nConvert enum variant into the corresponding value.\nExecute the function inside a transaction. If the function …\nExecute the function inside a transaction. If the function …\nExecute the function inside a transaction. If the function …\nCreate a MySQL transaction\nExecute the function inside a transaction with isolation …\nExecute the function inside a transaction with isolation …\nExecute the function inside a transaction. If the function …\nGet the inner value, unless <code>self</code> is NotSet.\nThe method to convert the type to a u64\nTry to convert the corresponding value into enum variant.\nGet a value from the query result with prefixed column name\nGet a value from the query result with prefixed column name\nGet a value from the query result with an ColIdx\nJust a delegate\nGet a value from the query result with an ColIdx\nGet a value from the query result based on the order in …\nGet a value from the query result based on the order in …\nGet a JSON from the query result with prefixed column name\nGet a tuple value from the query result with prefixed …\nGet a tuple value from the query result with prefixed …\nGet a tuple value from the query result based on the order …\nGet a tuple value from the query result based on the order …\nFor getting an array of enum. Postgres only\nMethod to call to perform the conversion\nCreate an ActiveValue::Unchanged\nMarks the column as <code>UNIQUE</code>\nGet an owned value of the ActiveValue\nUpdate an model in database\nPerform the <code>UPDATE</code> operation on an ActiveModel\nUpdate many models in database\nThe value of the query\nGet the name of all enum variants\nThe values for the SQL statement’s parameters\nCheck if an entity is related through another entity\nCreate <code>Selector</code> from Statement and columns. Executing this …\nCreate <code>SelectorRaw</code> from Statement and columns. Executing …\nFrom type\nInto type\nTryError\nArity of the Primary Key\nA Rust representation of enum defined in database.\nThe Rust Value backing ActiveEnums\nA Trait for overriding the ActiveModel behavior\nA Trait for ActiveModel to perform Create, Update or …\nDefines a stateful value used in ActiveModel.\nColumn identifier consists of 2 columns\nDefines a Column for an Entity\nAPI for working with a <code>Column</code>. Mostly a wrapper of the …\nAll column types\nSeaORM’s utility methods that act on ColumnType\nThe Entity this ActiveModel belongs to\nA Trait for mapping an Entity to a database table\nAn abstract base class for defining Entities.\nAction to perform on a foreign key whenever there are …\nA Trait for implementing a QueryResult\nAn Entity has many relationships\nAn Entity has one relationship\nEnsure the identifier for an Entity can be converted to a …\nList of column identifier\nCheck the Identity of an Entity\nA Trait for any type that can be converted into an …\nAny type that can be converted into an ActiveValue\nPerforms a conversion into an Identity\nThis trait designates that an <code>Enum</code> can be iterated over. …\nSame as RelationDef\nA Trait for links between Entities\nColumn identifier consists of more than 3 columns\nA Trait for a Model\nAn undefined Value\nA trait for a part of Model\nHow many columns this Primary Key comprises\nHow to map a Primary Key to a column\nA Trait for to be used to define a Primary Key.\nChecks if Entities are related\nDefines a helper to build a relation\nDefines a relationship\nDefines the relations of an Entity\nDefines the type of relationship\nDefines a set operation on an ActiveValue\nA defined Value actively being set\nColumn identifier consists of 3 columns\nA Trait for any type that can be converted into an Model\nColumn identifier consists of 1 column\nDefines an unchanged operation on an ActiveValue\nA defined Value remain unchanged\nDefines an not set operation on an ActiveValue\nValue variants\nDefine the Rust type that each enum variant corresponds.\nThis has no purpose. It will be removed in the next major …\nWill be called after <code>ActiveModel::delete</code>\nWill be called after <code>ActiveModel::insert</code>, …\nget the name of the entity the column belongs to\nConstruct a enum expression with casting\nMethod to call to get the static string identity\nMethod to call to perform <code>AUTOINCREMENT</code> operation on a …\nWill be called before <code>ActiveModel::delete</code>\nWill be called before <code>ActiveModel::insert</code>, …\nCheck if the relation belongs to an Entity\nMethod to get the comment for the schema, defaults to …\nCondition type of join on expression\nCondition type of join on expression\nSee also SeaQuery’s method with same name.\nGet the database column definition of this active enum.\nDefine a column for an Entity\nInstantiate a new ColumnDef\nThe method to call\nThe default implementation of the ActiveModel\nDelete an model from database\nDelete an active model by its primary key\nDelete a model\nDelete a model based on primary key\nDelete many models from database\nGet the name of the entity the column belongs to\nConstruct select statement to find one / all models\nFind a model by primary key\nFind all the Entities that are linked to the Entity\nFind linked Models\nFind related Entities\nFind related Models\nThe name of foreign key constraint\nThe name of foreign key constraint\nReference to from a Column\nReference to from a Column\nMethod to map a primary key from a column in an Entity\nCreate ActiveModel from a JSON value\nInstantiate a Model from a QueryResult\nTransform the error from instantiating a Model from a …\nReference from another Entity\nReference from another Entity\nGet a immutable ActiveValue from an ActiveModel\nGet the Value of a column from an Entity\nGet the name of the enum if this is a enum column\nGet the primary key of the ActiveModel\nCheck if the Entity has many relations\nCheck if the entity has at least one relation\nMethod to call to perform this check\nPerform an operation if the column is null\nInsert an model into database\nPerform an <code>INSERT</code> operation on the ActiveModel\nInsert many models into database\nMethod to call to perform the conversion\nMethod to perform the conversion\nMethod to map a primary key to a column in an Entity\nConstruct a <code>SimpleExpr::Column</code> wrapped in <code>Expr</code>.\nMethod to perform the conversion\nConstruct a returning <code>Expr</code>.\nConvert an owned enum variant into the corresponding value.\nReturn <code>true</code> if any attribute of <code>ActiveModel</code> is <code>Set</code>\nSee also SeaQuery’s method with same name.\nCheck the state of a ActiveValue\nSee also SeaQuery’s method with same name.\nDefines the owner of the Relation\nDefines the owner of the Relation\nLink for an Entity\nSee also SeaQuery’s method with same name.\nSee also SeaQuery’s method with same name.\nGet the name of the module from the invoking …\nGet the name of enum\nCreate a new ActiveModel with default values. Also used by …\nSet the state of an ActiveValue to the not set state\nCustom join ON condition\nCustom join ON condition\nDefines an operation to be performed on a Foreign Key when …\nDefines an operation to be performed on a Foreign Key when …\nDefines an operation to be performed on a Foreign Key when …\nDefines an operation to be performed on a Foreign Key when …\nRe-export common types from the entity\nThe type of relationship defined in RelationType\nThe type of relationship defined in RelationType\nReset the value from ActiveValue::Unchanged to …\nReset all values from ActiveValue::Unchanged to …\nInsert the model if primary key is <code>NotSet</code>, update …\nCast value of a column into the correct type for database …\nCast value of an enum column as enum type; do nothing if …\nMethod to get the name for the schema, defaults to …\nCast column expression used in select statement. It only …\nSelect specific columns this [PartialModel] needs\nCast enum column as text; do nothing if <code>self</code> is not an …\nSet the Value into an ActiveModel\nSet the Value of a column in an Entity\nSet the corresponding attributes in the ActiveModel from a …\nSee also SeaQuery’s method with same name.\nGet the name of the table\nGet the TableRef from invoking the <code>self.schema_name()</code>\nGet a mutable ActiveValue from an ActiveModel\nCheck if an entity is related to another entity\nReference to another column\nReference to another column\nReference to another ENtity\nReference to another ENtity\nConvert enum variant into the corresponding value.\nTry to convert the corresponding value into enum variant.\nFor getting an array of enum. Postgres only\nMethod to call to perform the conversion\nUpdate an model in database\nPerform the <code>UPDATE</code> operation on an ActiveModel\nUpdate many models in database\nGet the name of all enum variants\nCheck if an entity is related through another entity\nArity of the Primary Key\nA Rust representation of enum defined in database.\nA Trait for overriding the ActiveModel behavior\nA Trait for ActiveModel to perform Create, Update or …\nError occurred within the <code>Any</code> driver mapping to/from the …\nRepresents a JSON array.\nThrown by <code>TryFrom&lt;ActiveModel&gt;</code>, which assumes all …\nA big decimal type.\nRepresents a JSON boolean.\nISO 8601 calendar date without timezone. Allows for every …\nISO 8601 combined date and time without timezone.\nDate time represented in local time\nDate time represented in UTC\nDate time with fixed offset\nISO 8601 time without timezone. Allows for the nanosecond …\nError occurred while decoding a value from a specific …\nDefines a Column for an Entity\nError during <code>impl FromStr for Entity::Column</code>\nColumn index was out of bounds.\nNo column found for the given name.\nAPI for working with a <code>Column</code>. Mostly a wrapper of the …\nAll column types\nSeaORM’s utility methods that act on ColumnType\nError occurred while parsing a connection string.\nThere was a problem with the database connection\nConnection Acquire error\nThis error can happen when the connection pool is …\nConnection closed\nThe generic API for a database connection that can perform …\nType error: the specified type cannot be converted from …\nA trait for any type that can be turn into a cursor\nA custom error\nError returned from the database.\nHandle a database connection depending on the backend …\nISO 8601 calendar date without timezone. Allows for every …\nISO 8601 combined date and time without timezone.\nDate time represented in local time\nDate time represented in UTC\nDate time with fixed offset\nThe same as a DatabaseConnection\nAn error from unsuccessful database operations\n<code>Decimal</code> represents a 128 bit representation of a …\nError occurred while decoding a value.\nA derive macro to implement <code>sea_orm::ActiveEnum</code> trait for …\nThe DeriveActiveModel derive macro will implement …\nModels that a user can override\nThe DeriveColumn derive macro will implement [ColumnTrait] …\nDerive a column if column names are not in snake-case\nCreate an Entity\nThis derive macro is the ‘almighty’ macro which …\nThe DeriveIden derive macro will implement …\nDerive into an active model\nThe DeriveModel derive macro will implement ModelTrait for …\nThe DerivePartialModel derive macro will implement …\nThe DerivePrimaryKey derive macro will implement […\nThe DeriveRelatedEntity derive macro will implement …\nThe DeriveRelation derive macro will implement …\nImplements traits for types that wrap a database value …\nThe connection to the database has been severed\nThe connection to the database has been severed\nThe Entity this ActiveModel belongs to\nA Trait for mapping an Entity to a database table\nAn abstract base class for defining Entities.\nCreates a new type that iterates of the variants of an …\nAn operation did not execute successfully\nHelper to build a <code>SimpleExpr</code>.\nAction to perform on a foreign key whenever there are …\nError for Foreign key constraint\nIdentifier\nEnsure the identifier for an Entity can be converted to a …\nError generated from within SeaORM\nError communicating with the database backend.\nRepresents any valid JSON value.\nError occurred while parsing json value as target type\nA Trait for links between Entities\nThis trait implements the Data Loader API\nA migration error\nSource model\nA Trait for a Model\nString size\nRepresents a JSON null value.\nRepresents a JSON number, whether integer or floating …\nRepresents a JSON object.\nA Trait for any type that can paginate results\n<code>Pool::close</code> was called while we were waiting in …\nA <code>Pool::acquire</code> timed out due to connections not becoming …\nHow many columns this Primary Key comprises\nHow to map a Primary Key to a column\nA Trait for to be used to define a Primary Key.\nUnexpected or invalid data encountered while communicating …\nAn error occurred while performing a query\nPerform a FILTER opertation on a statement\nDefines the result of a query operation on a Model\nA thread-safe reference-counting pointer. ‘Arc’ stands …\nThe record was not found in the database\nNone of the records are inserted, that probably means all …\nNone of the records are updated, that means a WHERE …\nChecks if Entities are related\nDefines a relationship\nDefines the relations of an Entity\nNo rows returned by a query that expected to return at …\nRuntime error\nDefines a structure to perform select operations\nSelect operation\nSelect operation\nAn error from unsuccessful SQL query\nRepresents all the ways a method can fail within SQLx.\nSQLx Error\nCreate a SQLite database connection and pool\nCreate a SQLite database connection and pool\nRepresents a JSON string.\nLength for var-char/binary; default to 255\nISO 8601 time without timezone. Allows for the nanosecond …\nDate in the proleptic Gregorian calendar.\nCombined date and time.\nA <code>PrimitiveDateTime</code> with a <code>UtcOffset</code>.\nThe clock time within a given date. Nanosecond precision.\nConnection pool timed out\nError occurred while attempting to establish a TLS …\nRuntime type conversion error\nError occurred while parsing value as target type\nType in query doesn’t exist. Likely due to typo or …\nError for duplicate record in unique field or primary key …\nAfter an insert statement it was impossible to retrieve …\nWhen updating, a model should know its primary key to check\nA Universally Unique Identifier (UUID).\nValue variants\nDefine the Rust type that each enum variant corresponds.\nThis has no purpose. It will be removed in the next major …\nA background worker has crashed.\nWill be called after <code>ActiveModel::delete</code>\nWill be called after <code>ActiveModel::insert</code>, …\nget the name of the entity the column belongs to\nConstruct a enum expression with casting\nMethod to call to get the static string identity\nMethod to call to perform <code>AUTOINCREMENT</code> operation on a …\nWill be called before <code>ActiveModel::delete</code>\nWill be called before <code>ActiveModel::insert</code>, …\nCheck if the relation belongs to an Entity\nApply a where condition using the model’s primary key\nPerform a check to determine table belongs to a Model …\nMethod to get the comment for the schema, defaults to …\nCondition type of join on expression\nSee also SeaQuery’s method with same name.\nPerform a count on the paginated results\nGet the database column definition of this active enum.\nDefine a column for an Entity\nInstantiate a new ColumnDef\nThe method to call\nThe default implementation of the ActiveModel\nDelete an model from database\nDelete an active model by its primary key\nDelete a model\nDelete a model based on primary key\nDelete many models from database\nGet the name of the entity the column belongs to\nExecute a Statement\nExecute a unprepared Statement\nAdd an AND WHERE expression\nConstruct select statement to find one / all models\nFind a model by primary key\nFind all the Entities that are linked to the Entity\nFind linked Models\nFind related Entities\nFind related Models\nThe name of foreign key constraint\nReference to from a Column\nMethod to map a primary key from a column in an Entity\nCreate ActiveModel from a JSON value\nReference from another Entity\nGet a immutable ActiveValue from an ActiveModel\nGet the Value of a column from an Entity\nFetch the database backend as specified in DbBackend. This …\nGet the name of the enum if this is a enum column\nGet the primary key of the ActiveModel\nCheck if the Entity has many relations\nCheck if the entity has at least one relation\nPerform an operation if the column is null\nInsert an model into database\nPerform an <code>INSERT</code> operation on the ActiveModel\nInsert many models into database\nMethod to map a primary key to a column in an Entity\nConstruct a <code>SimpleExpr::Column</code> wrapped in <code>Expr</code>.\nConstruct a returning <code>Expr</code>.\nConvert an owned enum variant into the corresponding value.\nReturn <code>true</code> if any attribute of <code>ActiveModel</code> is <code>Set</code>\nCheck if the connection is a test connection for the Mock …\nSee also SeaQuery’s method with same name.\nCheck the state of a ActiveValue\nSee also SeaQuery’s method with same name.\nDefines the owner of the Relation\nLink for an Entity\nUsed to eager load has_many relations\nUsed to eager load many_to_many relations\nUsed to eager load has_one relations\nSee also SeaQuery’s method with same name.\nSee also SeaQuery’s method with same name.\nGet the name of the module from the invoking …\nGet the name of enum\nCreate a new ActiveModel with default values. Also used by …\nSet the state of an ActiveValue to the not set state\nCustom join ON condition\nDefines an operation to be performed on a Foreign Key when …\nDefines an operation to be performed on a Foreign Key when …\nPaginate the result of a select operation.\nAdd the query to perform a FILTER on\nExecute a Statement and return a collection Vec&lt;QueryResult…\nExecute a Statement and return a query\nThe type of relationship defined in RelationType\nReset the value from ActiveValue::Unchanged to …\nReset all values from ActiveValue::Unchanged to …\nInsert the model if primary key is <code>NotSet</code>, update …\nCast value of a column into the correct type for database …\nCast value of an enum column as enum type; do nothing if …\nMethod to get the name for the schema, defaults to …\nCast column expression used in select statement. It only …\nCast enum column as text; do nothing if <code>self</code> is not an …\nSet the Value into an ActiveModel\nSet the Value of a column in an Entity\nSet the corresponding attributes in the ActiveModel from a …\nSee also SeaQuery’s method with same name.\nCheck if the connection supports <code>RETURNING</code> syntax on …\nGet the name of the table\nGet the TableRef from invoking the <code>self.schema_name()</code>\nGet a mutable ActiveValue from an ActiveModel\nCheck if an entity is related to another entity\nReference to another column\nReference to another ENtity\nConvert enum variant into the corresponding value.\nTry to convert the corresponding value into enum variant.\nUpdate an model in database\nPerform the <code>UPDATE</code> operation on an ActiveModel\nUpdate many models in database\nGet the name of all enum variants\nCheck if an entity is related through another entity\nFrom type\nInto type\nTryError\nError occurred within the <code>Any</code> driver mapping to/from the …\nThrown by <code>TryFrom&lt;ActiveModel&gt;</code>, which assumes all …\nError occurred while decoding a value from a specific …\nError during <code>impl FromStr for Entity::Column</code>\nColumn index was out of bounds.\nNo column found for the given name.\nError occurred while parsing a connection string.\nThere was a problem with the database connection\nConnection Acquire error\nThis error can happen when the connection pool is …\nConnection closed\nType error: the specified type cannot be converted from …\nA custom error\nError returned from the database.\nAn error from unsuccessful database operations\nError occurred while decoding a value.\nAn operation did not execute successfully\nError for Foreign key constraint\nError generated from within SeaORM\nError communicating with the database backend.\nError occurred while parsing json value as target type\nA migration error\n<code>Pool::close</code> was called while we were waiting in …\nA <code>Pool::acquire</code> timed out due to connections not becoming …\nUnexpected or invalid data encountered while communicating …\nAn error occurred while performing a query\nThe record was not found in the database\nNone of the records are inserted, that probably means all …\nNone of the records are updated, that means a WHERE …\nNo rows returned by a query that expected to return at …\nRuntime error\nAn error from unsuccessful SQL query\nRepresents all the ways a method can fail within SQLx.\nSQLx Error\nConnection pool timed out\nError occurred while attempting to establish a TLS …\nRuntime type conversion error\nError occurred while parsing value as target type\nType in query doesn’t exist. Likely due to typo or …\nError for duplicate record in unique field or primary key …\nAfter an insert statement it was impossible to retrieve …\nWhen updating, a model should know its primary key to check\nA background worker has crashed.\nFrom type\nInto type\nTryError\nQuery execution infos\nQuery executiuon duration\nQuery execution failed\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nQuery data\nRepresents a JSON array.\nRepresents a JSON boolean.\nRepresents the value of an <code>Condition::any</code> or <code>Condition::all</code>…\nThe generic API for a database connection that can perform …\nA trait for any type that can be turn into a cursor\nThis structure provides debug capabilities\nDefines the structure for a delete operation\nPerform a delete operation on multiple models\nPerform a delete operation on a model\nEntity, or a Select; to be used as parameters in …\nPerforms INSERT operations on a ActiveModel\nThe result of an INSERT operation on an ActiveModel\nPerforms a conversion to SimpleExpr\nJoin types\nRepresents any valid JSON value.\nThis trait implements the Data Loader API\nSource model\nRepresents a JSON null value.\nRepresents a JSON number, whether integer or floating …\nRepresents a JSON object.\nOrdering options\nA Trait for any type that can paginate results\nPerform a FILTER opertation on a statement\nPerforms ORDER BY operations\nAbstract API for performing queries\nConstrain the QueryStatement to QueryStatementBuilder trait\nA Trait for any type performing queries on a Model or …\nDefines a structure to perform select operations\nImplements the traits Iden and IdenStatic for a type\nImplements the traits Iden and IdenStatic for a type\nSelect specific column for partial model queries\nDefines a structure to perform a SELECT operation on two …\nDefines a structure to perform a SELECT operation on many …\nSelect operation\nSelect operation\nDefines an SQL statement\nCreate a stream for the QueryResult\nStream query results\nRepresents a JSON string.\nSpawn database transaction\nPerforms INSERT operations on a ActiveModel, will do …\nDefines a structure to perform UPDATE query operations on …\nDefines an UPDATE operation on multiple ActiveModels\nDefines an UPDATE operation on one ActiveModel\nThe result of an update operation on an ActiveModel\nValue variants\nAnd where condition. Calling <code>or_where</code> after <code>and_where</code> will …\nOptional and where, short hand for …\nApply an operation on the QueryTrait::QueryStatement if …\nGet an immutable ref to the query builder\nExecute SQL <code>BEGIN</code> transaction. Returns a Transaction that …\nExecute SQL <code>BEGIN</code> transaction with isolation level and/or …\nApply a where condition using the model’s primary key\nPerform a check to determine table belongs to a Model …\nBuild the query as <code>Statement</code>\nClear order expressions\nAdd a select column\nAdd a select column with alias\nSelect columns\nWhere condition, expressed with <code>any</code> and <code>all</code>. Calling …\nPerform a count on the paginated results\nThe database backend this statement is constructed for. …\nAdd a DISTINCT expression\nAdd a DISTINCT ON expression NOTE: this function is only …\nExecute a Statement\nExecute a unprepared Statement\nAdd an expression to the select expression list.\nSelect column.\nSame as <code>expr_as</code>. Here for legacy reasons.\nAdd select expressions from vector of <code>SelectExpr</code>.\nAdd an AND WHERE expression\nFetch the database backend as specified in DbBackend. This …\nAdd a group by column\nAdd an AND HAVING expression\nTake ownership of the query builder\nMethod to perform the conversion\nCheck if the connection is a test connection for the Mock …\nJoin via <code>RelationDef</code>.\nJoin via <code>RelationDef</code> with table alias.\nJoin via <code>RelationDef</code> with table alias but in reverse …\nJoin via <code>RelationDef</code> but in reverse direction. Assume when …\nThe id performed when AUTOINCREMENT was performed on the …\nAdd a limit expression. Passing in None would remove the …\nUsed to eager load has_many relations\nUsed to eager load many_to_many relations\nUsed to eager load has_one relations\nSelect lock\nSelect lock exclusive\nSelect lock shared\nRow locking with behavior (if supported).\nAdd an offset expression. Passing in None would remove the …\nOrder by column.\nAdd an order_by expression\nAdd an order_by expression (ascending)\nOrder by vector of columns.\nOrder by vector of columns with nulls order option.\nOrder by custom string.\nOrder by custom string with nulls order option.\nAdd an order_by expression (descending)\nOrder by <code>SimpleExpr</code>.\nOrder by <code>SimpleExpr</code> with nulls order option.\nOrder by column with nulls order option.\nAdd an order_by expression with nulls ordering option\nPaginate the result of a select operation.\nAdd the select SQL statement\nAdd the query to perform an ORDER BY operation\nAdd the query to perform a FILTER on\nGet a mutable ref to the query builder\nThe query to debug\nExecute a Statement and return a collection Vec&lt;QueryResult…\nExecute a Statement and return a query\nThe rows affected by the update operation\nIf self is Entity, use Entity::find()\nAdd a select column\nAdd a select column with alias\nClear the selection list\nThe SQL query\nExecute a Statement and return a stream of results\nCheck if the connection supports <code>RETURNING</code> syntax on …\nShorthand of <code>expr_as(Expr::col((T, C)), A)</code>.\nExecute the function inside a transaction. If the function …\nExecute the function inside a transaction with isolation …\nThe value of the query\nThe values for the SQL statement’s parameters\nThis is a helper struct to convert <code>EntityTrait</code> into …\ntable alter add column options\nHelper for create name alias\n<code>Value</code> types variant for Postgres array\nAsterisk (“*”)\nBreadth first traversal during the execution of the …\nBinary operator\nUpdate column value of existing row with inserting value\nSpecification of a table column\nColumn references\nAll column specification keywords\nAll column types\nA table definition inside a WITH clause (WithClause).\nRepresents the value of an <code>Condition::any</code> or <code>Condition::all</code>…\nRepresents anything that can be passed to an <code>Condition::any</code>…\nA column\nAn expression <code>(LOWER(column), ...)</code>\nFor recursive WithQuery WithClauses the CYCLE sql clause …\nDepth first traversal during the execution of the …\nTable identifier with database and schema prefix\nTable identifier with database and schema prefix and alias\nDelete existing rows from the table\nDo nothing\nHelper to build a <code>SimpleExpr</code>.\nUpdate column value of existing row with expression\nShorthand for constructing any foreign key statement\nForeign key on update &amp; on delete actions\nCreate a foreign key constraint for an existing table. …\nDrop a foreign key constraint for an existing table\nAll available types of foreign key statement\nframe_start or frame_end clause\nFrame clause\nFrame type\nFunction call helper.\nFunctions\nFunction call.\nFunction call with alias\nIdentifier\nIdentifier\nShorthand for constructing any index statement\nCreate an index for an existing table\nDrop an index for an existing table\nAll available types of index statement\nSpecification of a table index\nInsert any new rows into an existing table\nJoin expression used in select statement\nJoin on types\nJoin types\nSQL Keywords\nLike Expression\nList of lock behavior can be used in select statement\nList of lock types that can be used in select statement\nLogical chain operator\nMysql query builder.\nString size\nName in <code>SelectStatement</code>\nNull Alias\nNulls order\nRepresents ON CONFLICT (upsert) actions\nRepresents ON CONFLICT (upsert) targets\nRepresents strategies to update column in ON CONFLICT …\nOrdering options\nOrder expression\nFunction call helper.\nFunctions\nPostgres query builder.\nShorthand for constructing any table query\nInline query in <code>SelectExpr</code>\nAll available types of table query\nA thread-safe reference-counting pointer. ‘Arc’ stands …\nShorthand for constructing <code>ReturningClause</code>\nRETURNING clause.\nTable identifier with schema prefix\nTable identifier with schema prefix and alias\nFor recursive WithQuery WithClauses the traversing order …\nFor recursive WithQuery WithClauses the traversing order …\nList of distinct keywords that can be used in select …\nSelect expression used in select statement\nSelect rows from an existing table\nShared lock\nRepresents a Simple Expression in SQL.\nSqlite query builder.\nLength for var-char/binary; default to 255\nSubquery with alias\nSubQuery operators\nHelper for constructing any table statement\nTable identifier without any schema / database prefix\nTable identifier with alias\nAll available table alter options\nAlter a table\nCreate a table\nAll available table drop options\nDrop a table\nSpecification of a foreign key\nSpecification of a table index\nAll available table options\nAll available table partition options\nTable references\nRename a table\nAll available types of table statement\nDrop a table\nUnary operator\nList of union types that can be used in union clause\nUpdate column value of existing row\nExclusive lock\nUpdate existing rows in the table\nValue variants\nValues list with alias\nWindow type in <code>SelectExpr</code>\nWindow expression\nA WITH clause can contain one or multiple common table …\nA WITH query. A simple SQL query that has a WITH clause (…\nA trait for writing or formatting into Unicode-accepting …\nMacro to easily create an <code>Condition::all</code>.\nAnd where condition. Calling <code>or_where</code> after <code>and_where</code> will …\nOptional and where, short hand for …\nMacro to easily create an <code>Condition::any</code>.\nTranslating the SQL AST into engine-specific SQL …\nBuild corresponding SQL statement for certain database …\nBuild corresponding SQL statement for certain database …\nBuild corresponding SQL statement for certain database …\nBuild corresponding SQL statement for certain database …\nBuild corresponding SQL statement for certain database …\nBuild corresponding SQL statement for certain database …\nBuild corresponding SQL statement into the SqlWriter for …\nClear order expressions\ncolumn comment\nThe keyword for setting a column to be auto increment.\nWhere condition, expressed with <code>any</code> and <code>all</code>. Calling …\nError types used in sea-query.\nEscape a SQL string literal\nBuilding blocks of SQL statements.\nEngine specific SQL features.\nForeign key definition &amp; alternations statements.\nFor calling built-in SQL functions.\nIndex definition &amp; alternations statements.\nThe keywords for insert default row.\nWrite insert default rows expression.\nOrder by column.\nOrder by vector of columns.\nOrder by vector of columns with nulls order option.\nOrder by custom string.\nOrder by custom string with nulls order option.\nOrder by <code>SimpleExpr</code>.\nOrder by <code>SimpleExpr</code> with nulls order option.\nOrder by column with nulls order option.\nPartition by column.\nPartition by vector of columns.\nPartition by custom string.\nThe type of placeholder the builder uses for values, and …\nHelper for preparing SQL statements.\nTranslate <code>BinOper</code> into SQL statement.\nTranslate <code>CaseStatement</code> into SQL statement.\nTranslate the check constraint into SQL statement\nTranslate <code>ColumnDef</code> into SQL statement.\nTranslate <code>ColumnDef</code> into SQL statement.\nTranslate <code>ColumnSpec</code> into SQL statement.\nTranslate <code>ColumnType</code> into SQL statement.\nWrite <code>Value</code> inline.\nWrite FALSE constant\nWrite TRUE constant\nTranslate IF NOT EXISTS expression in <code>TableCreateStatement</code>.\nTranslate LIMIT expression in <code>DeleteStatement</code>.\nTranslate ORDER BY expression in <code>DeleteStatement</code>.\nTranslate <code>DeleteStatement</code> into SQL statement.\nTranslate <code>Order::Field</code> into SQL statement\nTranslate <code>ForeignKeyAction</code> into SQL statement.\nTranslate <code>ForeignKeyCreateStatement</code> into SQL statement.\nTranslate <code>ForeignKeyDropStatement</code> into SQL statement.\nTranslate <code>Function</code> into SQL statement.\nTranslate the generated column into SQL statement\nTranslate <code>IndexCreateStatement</code> into SQL statement.\nTranslate <code>IndexDropStatement</code> into SQL statement.\nTranslate [<code>IndexHint</code>] into SQL statement.\nTranslate <code>InsertStatement</code> into SQL statement.\nTranslate <code>JoinExpr</code> into SQL statement.\nTranslate <code>JoinOn</code> into SQL statement.\nTranslate <code>JoinType</code> into SQL statement.\nTranslate <code>Keyword</code> into SQL statement.\nTranslate <code>LogicalChainOper</code> into SQL statement.\nTranslate <code>Order</code> into SQL statement.\nTranslate <code>OrderExpr</code> into SQL statement.\nTranslate <code>QueryStatement</code> into SQL statement.\nTranslate <code>SelectDistinct</code> into SQL statement.\nTranslate <code>SelectExpr</code> into SQL statement.\nTranslate <code>LockType</code> into SQL statement.\nTranslate <code>SelectStatement</code> into SQL statement.\nTranslate <code>SimpleExpr</code> into SQL statement.\nTranslate <code>SubQueryOper</code> into SQL statement.\nTranslate <code>TableAlterStatement</code> into SQL statement.\nTranslate <code>TableCreateStatement</code> into SQL statement.\nTranslate <code>TableDropOpt</code> into SQL statement.\nTranslate <code>TableDropStatement</code> into SQL statement.\nTranslate <code>IndexCreateStatement</code> into SQL expression. This …\nTranslate <code>TableOpt</code> into SQL statement.\nDefault function\nTranslate <code>TablePartition</code> into SQL statement.\nTranslate <code>TableRef</code> into SQL statement.\nTranslate <code>TableRef</code> into SQL statement.\nTranslate <code>TableRef</code> that without values into SQL statement.\nTranslate <code>TableRef</code> into SQL statement.\nTranslate <code>TableRef</code> into SQL statement.\nTranslate <code>TableRenameStatement</code> into SQL statement.\nTranslate <code>TableTruncateStatement</code> into SQL statement.\nTranslate <code>SimpleExpr::Tuple</code> into SQL statement.\nTranslate <code>UnOper</code> into SQL statement.\nTranslate LIMIT expression in <code>UpdateStatement</code>.\nTranslate ORDER BY expression in <code>UpdateStatement</code>.\nTranslate <code>UpdateStatement</code> into SQL statement.\nWrite <code>Value</code> into SQL statement as parameter.\nTranslate a <code>&amp;[ValueTuple]</code> into a VALUES list.\nQuery statements (select, insert, update &amp; delete).\nThe type of quote the builder uses.\nSchema definition &amp; alternations statements\nConvert value to json value\nTable definition &amp; alternations statements.\nBuild corresponding SQL statement for certain database …\nBuild corresponding SQL statement for certain database …\nTokenizer for processing SQL.\nBase types used throughout sea-query.\nUnescape a SQL string literal\nContainer for all SQL value types.\nConvert a SQL value into syntax-specific string\nPrefix for tuples in VALUES list (e.g. ROW for Mysql)\nWrites a <code>char</code> into this writer, returning whether the …\nGlue for usage of the <code>write!</code> macro with implementors of …\nWrites a string slice into this writer, returning whether …\nMysql query builder.\nPostgres query builder.\nSqlite query builder.\ncolumn comment\nThe keyword for setting a column to be auto increment.\nEscape a SQL string literal\nThe keywords for insert default row.\nWrite insert default rows expression.\nThe type of placeholder the builder uses for values, and …\nTranslate <code>BinOper</code> into SQL statement.\nTranslate <code>CaseStatement</code> into SQL statement.\nTranslate the check constraint into SQL statement\nTranslate <code>ColumnDef</code> into SQL statement.\nTranslate <code>ColumnDef</code> into SQL statement.\nTranslate <code>ColumnSpec</code> into SQL statement.\nTranslate <code>ColumnType</code> into SQL statement.\nWrite <code>Value</code> inline.\nWrite FALSE constant\nWrite TRUE constant\nTranslate IF NOT EXISTS expression in <code>TableCreateStatement</code>.\nTranslate LIMIT expression in <code>DeleteStatement</code>.\nTranslate ORDER BY expression in <code>DeleteStatement</code>.\nTranslate <code>DeleteStatement</code> into SQL statement.\nTranslate <code>Order::Field</code> into SQL statement\nTranslate <code>ForeignKeyAction</code> into SQL statement.\nTranslate <code>ForeignKeyCreateStatement</code> into SQL statement.\nTranslate <code>ForeignKeyDropStatement</code> into SQL statement.\nTranslate <code>Function</code> into SQL statement.\nTranslate the generated column into SQL statement\nTranslate <code>IndexCreateStatement</code> into SQL statement.\nTranslate <code>IndexDropStatement</code> into SQL statement.\nTranslate [<code>IndexHint</code>] into SQL statement.\nTranslate <code>InsertStatement</code> into SQL statement.\nTranslate <code>JoinExpr</code> into SQL statement.\nTranslate <code>JoinOn</code> into SQL statement.\nTranslate <code>JoinType</code> into SQL statement.\nTranslate <code>Keyword</code> into SQL statement.\nTranslate <code>LogicalChainOper</code> into SQL statement.\nTranslate <code>Order</code> into SQL statement.\nTranslate <code>OrderExpr</code> into SQL statement.\nTranslate <code>QueryStatement</code> into SQL statement.\nTranslate <code>SelectDistinct</code> into SQL statement.\nTranslate <code>SelectExpr</code> into SQL statement.\nTranslate <code>LockType</code> into SQL statement.\nTranslate <code>SelectStatement</code> into SQL statement.\nTranslate <code>SimpleExpr</code> into SQL statement.\nTranslate <code>SubQueryOper</code> into SQL statement.\nTranslate <code>TableAlterStatement</code> into SQL statement.\nTranslate <code>TableCreateStatement</code> into SQL statement.\nTranslate <code>TableDropOpt</code> into SQL statement.\nTranslate <code>TableDropStatement</code> into SQL statement.\nTranslate <code>IndexCreateStatement</code> into SQL expression. This …\nTranslate <code>TableOpt</code> into SQL statement.\nDefault function\nTranslate <code>TablePartition</code> into SQL statement.\nTranslate <code>TableRef</code> into SQL statement.\nTranslate <code>TableRef</code> into SQL statement.\nTranslate <code>TableRef</code> that without values into SQL statement.\nTranslate <code>TableRef</code> into SQL statement.\nTranslate <code>TableRef</code> into SQL statement.\nTranslate <code>TableRenameStatement</code> into SQL statement.\nTranslate <code>TableTruncateStatement</code> into SQL statement.\nTranslate <code>SimpleExpr::Tuple</code> into SQL statement.\nTranslate <code>UnOper</code> into SQL statement.\nTranslate LIMIT expression in <code>UpdateStatement</code>.\nTranslate ORDER BY expression in <code>UpdateStatement</code>.\nTranslate <code>UpdateStatement</code> into SQL statement.\nWrite <code>Value</code> into SQL statement as parameter.\nTranslate a <code>&amp;[ValueTuple]</code> into a VALUES list.\nThe type of quote the builder uses.\nUnescape a SQL string literal\nConvert a SQL value into syntax-specific string\nPrefix for tuples in VALUES list (e.g. ROW for Mysql)\nColumn and value vector having different length\nContains the error value\nContains the success value\nResult type for sea-query\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHelper to build a <code>SimpleExpr</code>.\nRepresents a Simple Expression in SQL.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>-&gt;&gt;</code>. Retrieves JSON field and casts it to an appropriate …\nCreates a new “CREATE or DROP EXTENSION” statement for …\nCreates a new “CREATE EXTENSION” statement for …\nCreates a new “DROP EXTENSION” statement for PostgreSQL\n<code>-&gt;</code>. Retrieves JSON field as JSON value.\nBinary operator\nFunction call helper.\nFunctions\nPostgreSQL <code>ltree</code> extension type.\n<code>~</code> Regex operator.\n<code>~*</code>. Regex operator with case insensitive matching.\nHelper for constructing any type statement\nChanges only <code>ADD VALUE x</code> options into <code>ADD VALUE x AFTER</code> …\nConstruct type <code>TypeAlterStatement</code>\nCreate enum as custom type\nAdd a enum value before an existing value\nChanges only <code>ADD VALUE x</code> options into <code>ADD VALUE x BEFORE</code> …\nUses “CASCADE” on Create Extension Statement.\nUses “CASCADE” on Drop Extension Statement.\nSet <code>CASCADE</code>\nExpress a postgres retrieves JSON field and casts it to an …\nAlias of <code>PgExpr::concatenate</code>\nExpress an postgres concatenate (<code>||</code>) expression.\nExpress an postgres fulltext search contained (<code>&lt;@</code>) …\nExpress an postgres fulltext search contains (<code>@&gt;</code>) …\nCreates a new <code>ExtensionCreateStatement</code>\nConstruct type <code>TypeCreateStatement</code>\nCreates a new <code>ExtensionDropStatement</code>\nConstruct type <code>TypeDropStatement</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nExpress a postgres retrieves JSON field as JSON value (<code>-&gt;</code>).\nUses “IF EXISTS” on Drop Extension Statement.\nSet <code>IF EXISTS</code>\nUses “IF NOT EXISTS” on Create Extension Statement.\nExpress a <code>ILIKE</code> expression.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExpress an postgres fulltext search matches (<code>@@</code>) …\nSets the name of the extension to be created.\nSets the name of the extension to be dropped.\nDrop a type\nChange the definition of a type\nDrop multiple types\nExpress a <code>NOT ILIKE</code> expression\nTranslate <code>ExtensionCreateStatement</code> into database specific …\nTranslate <code>ExtensionDropStatement</code> into database specific …\nTranslate <code>TypeAlterStatement</code> into database specific SQL …\nTranslate <code>TypeCreateStatement</code> into database specific SQL …\nTranslate <code>TypeDropStatement</code> into database specific SQL …\nTranslate <code>TypeRef</code> into SQL statement.\nRename a enum value\nUses “RESTRICT” on Drop Extension Statement.\nSet <code>RESTRICT</code>\nUses “WITH SCHEMA” on Create Extension Statement.\nBuild corresponding SQL statement and return SQL string\nBuild corresponding SQL statement and return SQL string\nBuild corresponding SQL statement and return SQL string\nBuild corresponding SQL statement and return SQL string\nBuild corresponding SQL statement and return SQL string\nUses “VERSION” on Create Extension Statement.\n<code>-&gt;&gt;</code>. Retrieves JSON field and casts it to an appropriate …\n<code>-&gt;</code>. Retrieves JSON field as JSON value.\n<code>GLOB</code>\n<code>MATCH</code>.\nSqlite-specific binary operator.\nExpress an sqlite retrieves JSON field and casts it to an …\nReturns the argument unchanged.\nExpress an sqlite retrieves JSON field as JSON value (<code>-&gt;</code>).\nExpress an sqlite <code>GLOB</code> operator.\nCalls <code>U::from(self)</code>.\nExpress an sqlite <code>MATCH</code> operator.\nShorthand for constructing any foreign key statement\nForeign key on update &amp; on delete actions\nCreate a foreign key constraint for an existing table. …\nDrop a foreign key constraint for an existing table\nAll available types of foreign key statement\nSpecification of a foreign key\nFunction call helper.\nFunctions\nFunction call.\nFunction call helper.\nFunctions\nShorthand for constructing any index statement\nCreate an index for an existing table\nDrop an index for an existing table\nAll available types of index statement\nSpecification of a table index\nSpecification of a table index\nA trait for writing or formatting into Unicode-accepting …\nWrites a <code>char</code> into this writer, returning whether the …\nGlue for usage of the <code>write!</code> macro with implementors of …\nWrites a string slice into this writer, returning whether …\nBreadth first traversal during the execution of the …\nUpdate column value of existing row with inserting value\nA table definition inside a WITH clause (WithClause).\nRepresents the value of an <code>Condition::any</code> or <code>Condition::all</code>…\nRepresents anything that can be passed to an <code>Condition::any</code>…\nA column\nAn expression <code>(LOWER(column), ...)</code>\nFor recursive WithQuery WithClauses the CYCLE sql clause …\nDepth first traversal during the execution of the …\nDelete existing rows from the table\nDo nothing\nUpdate column value of existing row with expression\nframe_start or frame_end clause\nFrame clause\nFrame type\nInsert any new rows into an existing table\nJoin expression used in select statement\nList of lock behavior can be used in select statement\nList of lock types that can be used in select statement\nName in <code>SelectStatement</code>\nRepresents ON CONFLICT (upsert) actions\nRepresents ON CONFLICT (upsert) targets\nRepresents strategies to update column in ON CONFLICT …\nShorthand for constructing any table query\nInline query in <code>SelectExpr</code>\nAll available types of table query\nShorthand for constructing <code>ReturningClause</code>\nRETURNING clause.\nFor recursive WithQuery WithClauses the traversing order …\nFor recursive WithQuery WithClauses the traversing order …\nList of distinct keywords that can be used in select …\nSelect expression used in select statement\nSelect rows from an existing table\nShared lock\nList of union types that can be used in union clause\nUpdate column value of existing row\nExclusive lock\nUpdate existing rows in the table\nWindow type in <code>SelectExpr</code>\nWindow expression\nA WITH clause can contain one or multiple common table …\nA WITH query. A simple SQL query that has a WITH clause (…\nAnd where condition. Calling <code>or_where</code> after <code>and_where</code> will …\nOptional and where, short hand for …\nBuild corresponding SQL statement for certain database …\nBuild corresponding SQL statement for certain database …\nBuild corresponding SQL statement for certain database …\nBuild corresponding SQL statement for certain database …\nBuild corresponding SQL statement into the SqlWriter for …\nClear order expressions\nWhere condition, expressed with <code>any</code> and <code>all</code>. Calling …\nOrder by column.\nOrder by vector of columns.\nOrder by vector of columns with nulls order option.\nOrder by custom string.\nOrder by custom string with nulls order option.\nOrder by <code>SimpleExpr</code>.\nOrder by <code>SimpleExpr</code> with nulls order option.\nOrder by column with nulls order option.\nPartition by column.\nPartition by vector of columns.\nPartition by custom string.\nBuild corresponding SQL statement for certain database …\nBuild corresponding SQL statement for certain database …\nBuild corresponding SQL statement for certain database …\nBuild corresponding SQL statement for certain database …\ntable alter add column options\nSpecification of a table column\nAll column specification keywords\nAll column types\nString size\nLength for var-char/binary; default to 255\nHelper for constructing any table statement\nAll available table alter options\nAlter a table\nCreate a table\nAll available table drop options\nDrop a table\nAll available table options\nAll available table partition options\nRename a table\nAll available types of table statement\nDrop a table\nHelper for create name alias\nAsterisk (“*”)\nBinary operator\nColumn references\nTable identifier with database and schema prefix\nTable identifier with database and schema prefix and alias\nFunction call with alias\nIdentifier\nIdentifier\nJoin on types\nJoin types\nSQL Keywords\nLike Expression\nLogical chain operator\nNull Alias\nNulls order\nOrdering options\nOrder expression\nA thread-safe reference-counting pointer. ‘Arc’ stands …\nTable identifier with schema prefix\nTable identifier with schema prefix and alias\nSubquery with alias\nSubQuery operators\nTable identifier without any schema / database prefix\nTable identifier with alias\nTable references\nUnary operator\nValues list with alias\n<code>Value</code> types variant for Postgres array\nValue variants\nConvert value to json value\nAcquire connections or transactions from a database in a …\nError occurred within the <code>Any</code> driver mapping to/from the …\nA tuple of arguments to be sent to the database.\nThe concrete <code>Column</code> implementation for this database.\nError occurred while decoding a value from a specific …\nA type that can be used to index into a <code>Row</code> or <code>Statement</code>.\nColumn index was out of bounds.\nNo column found for the given name.\nError occurred while parsing a connection string.\nRepresents a single database connection.\nThe concrete <code>Connection</code> implementation for this database.\nA database driver.\nError returned from the database.\nA type that can be decoded from the database.\nError occurred while decoding a value.\nThe enum <code>Either</code> with variants <code>Left</code> and <code>Right</code> is a general …\nEncode a single value to be sent to the database.\nContains the error value\nRepresents all the ways a method can fail within SQLx.\nA type that may be executed against a database connection.\nA type that contains or can provide a database connection …\nA record that can be built from a row returned by the …\nError communicating with the database backend.\nA value of type <code>L</code>.\nThe display name for this database driver.\nContains the success value\nAn asynchronous pool of SQLx database connections.\n<code>Pool::close</code> was called while we were waiting in …\nA <code>Pool::acquire</code> timed out due to connections not becoming …\nUnexpected or invalid data encountered while communicating …")