searchState.loadedDescShard("chain_actions", 0, "Contains high-level traits that translate to on-chain …\nContains all actions that a node can execute on-chain.\nDefines the main FIFO MPSC queue for actions - the …\nThis module adds functionality of tracking the action …\nThis module contains the ChannelActions trait defining …\nContains all errors used in this crate.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates new instance.\nThis module contains the NodeActions trait defining action …\nModule defining various Ethereum transaction payload …\nThis module contains the TicketRedeemActions trait …\nTries to redeem the given ticket. If the ticket is not …\nRedeems all redeemable tickets in the given channel.\nRedeems all redeemable tickets in the incoming channel …\nOn-chain address of this node\nNumber of pending transactions in the queue\nRepresents confirmation of the <code>Action</code> execution.\nA queue of Actions to be executed.\nConfiguration for the ActionQueue\nSends a future Ethereum transaction into the <code>ActionQueue</code>.\nNotifies about completion of a transaction (success or …\nImplements execution of transactions underlying each <code>Action</code>…\nAction that was executed\nClones the <code>ActionState</code> implementation.\nAnnounces the node on-chain given the <code>AnnouncementData</code>\nCloses incoming channel.\nReturn …\nCorresponding chain event if any\nFinalizes closure of an outgoing channel.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nExecutes channel funding transaction (or channel opening) …\nInitiates closure of an outgoing channel.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum time (in seconds) to wait for the action to be …\nCreates a new instance with the given TransactionExecutor …\nCreates a new producer of actions for this queue.\nExecutes ticket redemption transaction given a ticket.\nRegisters Safe with the node.\nDelivers the future action into the <code>ActionQueue</code> for …\nConsumes self and runs the main queue processing loop …\nHash of the transaction that executed this action\nPerforms withdrawal of a certain amount from an address. …\nAllows tracking state of an Action via registering …\nFuture that resolves once an expectation is matched by …\nImplements action state tracking using a non-persistent …\nExpectation on a chain event within a TX indexed by the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTries to match the given event against the registered …\nConstructs new expectation given the required TX hash and …\nRegisters new IndexerExpectation.\nEvaluates if the given event satisfies this expectation.\nRequired TX hash\nManually unregisters <code>IndexerExpectation</code> given its TX hash.\nGathers all channel related on-chain actions.\nCloses the channel to counterparty in the given direction. …\nFunds the given channel with the given <code>amount</code>\nOpens a channel to the given <code>destination</code> with the given …\nEnumerates all Chain Actions related errors.\nContains the error value\nContains the success value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nContains all on-chain calls specific to HOPR node itself.\nAnnounces node on-chain with key binding. The operation …\nRegisters the safe address with the node\nWithdraws the specified <code>amount</code> of tokens to the given …\nGenerates transaction payloads that do not use …\nTrait for various implementations of generators of common …\nPayload generator that generates Safe-compliant ABI\nCreates the transaction payload to announce a node …\nCreate a ERC20 approve transaction payload. Pre-requisite …\nCreates the transaction payload to immediately close an …\nConvert off-chain representation of acknowledged ticket to …\nConverts off-chain representation of VRF parameters into a …\nCreates a transaction payload to remove the Safe instance. …\nCreates a transaction payload that withdraws funds from an …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates the transaction payload to open a payment channel\nCreates the transaction payload that initiates the closure …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUsed to create the payload to claim incentives for …\nCreates a transaction payload to register a Safe instance …\nCreate a ERC20 transfer transaction payload\nGathers all the ticket redemption related on-chain calls.\nRedeems all redeemable tickets in all channels.\nTries to redeem the given ticket. If the ticket is not …\nRedeems all redeemable tickets in the given channel.\nRedeems all redeemable tickets in the incoming channel …")