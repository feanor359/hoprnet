searchState.loadedDescShard("hopr_transport", 0, "The crate aggregates and composes individual transport …\nRepresents the received decrypted packet carrying the …\nRepresents a keypair consisting of a secp256k1 private and …\nTarget is a service directly at the exit node with a given …\nHigh quality connection to at least 1 public relay and 1 …\nRepresents a challenge for the half-key in Proof of Relay. …\nRepresents an Ethereum 256-bit hash value This …\nNetwork health represented with colors, where green is the …\nInterface into the physical transport mechanism allowing …\nRandom intermediate path with at least the given number of …\nWrapper for incoming Session along with other information …\nA fixed intermediate path consisting of at most …\nRepresents a generic key pair The keypair contains a …\nThe maximum number of hops this instance can represent.\nRepresentation of a Multiaddr.\nThe network object storing information about the running …\nEvents generated by the Network object allowing it to …\nRepresents a keypair consisting of an Ed25519 private and …\nRepresents an Ed25519 public key.\nLow quality connection to at least 1 public relay\nProcessed indexer generated events.\nActual origin.\nStatus of the peer as recorded by a network component.\nRepresents the type of the public key\nNo connection, default\nFrame reassembly\nRepresents routing options in a mixnet with a maximum …\nInner MTU size of what the HOPR payload can take (payload …\nRepresents the type of the private (secret) key\nFrame segmentation\nCapabilities of a session.\nConfiguration for the session.\nUnique ID of a specific session.\nDefines what should happen with the data at the recipient …\nTarget is running over TCP with the given address and port.\nEnumeration of errors thrown from this library.\nTarget is running over UDP with the given IP address and …\nUnknown health, on application startup\nHigh quality connection to at least 1 public relay\nAdd a new peer into the network\nCapabilities of this Session.\nCapabilities offered by the session.\nConfiguration of the crate::HoprTransport.\nConstants used and exposed by the crate.\nReturns the number of hops this instance represents. This …\nTakes all the byte slices and computes hash of their …\nCreate a new, empty multiaddress.\nChecks whether the given <code>Multiaddr</code> is a suffix of this …\nErrors used by the crate.\nConstruct an infinitely running background loop producing …\nConvert a Multiaddr to a string\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTries to create the public key from a Ed25519 private key. …\nCreates a keypair from the given secret key.\nGets the average quality of this peer\nGets the immediate node quality\nCheck whether the PeerId is present in the network\nConvenience method that creates a new hash by hashing this.\nReturns the quality of the network as a network health …\nID of this Session.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInverts the intermediate path if this is an instance of …\nReturns true if the length of this multiaddress is 0.\nReturns the components of this multiaddress.\nReturn the length in bytes of this multiaddress.\nThe fixed path options for the session.\nThe peer to which the session should be established.\nPops the last <code>Protocol</code> of this multiaddr, or <code>None</code> if the …\nReturns &amp;str identifiers for the protocol names themselves.\nReturns the public part of the keypair\nAdds an already-parsed address component to the end of …\nGenerates a new random keypair.\nRemove peer from the network\nReplace a <code>Protocol</code> at some position in this <code>Multiaddr</code>.\nRouting options used to deliver data.\nMain p2p loop that instantiates a new libp2p::Swarm …\nExecute all processes of the <code>crate::HoprTransport</code> object.\nReturns the private (secret) part of the keypair\nActual incoming session.\nRemove the <code>p2p/&lt;PeerId&gt;</code> component from a multiaddress\nDesired target of the data received over the session.\nTarget of the session.\nProtocol to be used to connect to the target\nOutputs the public key as PeerId represented as Base58 …\nReturn a copy of this <code>Multiaddr</code>’s byte representation.\nConvenience function to copy data in both directions …\nConsumes the instance and produces separated private and …\nUpdate the peer record with the observation\nLike <code>Multiaddr::push</code> but consumes <code>self</code>.\nCreate a new, empty multiaddress with the given capacity.\nAppends the given <code>PeerId</code> if not yet present at the end of …\nDNS based host\nConfiguration for the Heartbeat mechanism\nConfiguration of the listening host.\nEnumeration of possible host types.\nIPv4 based host\nConfiguration for the <code>crate::network::Network</code> object\nConfiguration of the P2P protocols.\nConfiguration of the physical transport mechanism.\nHost on which to listen\nWhen true, assume that the node is running in an isolated …\nReturn …\nReturn …\nReturn …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n<code>heartbeat</code> protocol config\nInterval in which the heartbeat is triggered in seconds\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck whether the string is an actual reachable domain.\nCheck whether the string looks like a valid domain.\nMaximum delay\nMinimum delay will be multiplied by backoff, it will be …\nWinning probability that gets printed on any outgoing …\nListening TCP or UDP port (mandatory).\nWhen true, assume a testnet with multiple nodes running on …\nThe time interval for which to consider peer heartbeat …\n<code>ticket_aggregation</code> protocol config\nValidates the HostConfig to be used as an external host\nRound-to-round variance to complicate network sync in …\nThe maximum waiting time for a message send to produce a …\nContains the error value\nErrors produced by the crate.\nErrors that can be generated by the crate.\nContains the success value\nErrors generated by the crate.\nResult produced by the crate, uses the HoprTransportError …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndexer events triggered externally from the …\nTicket statistics data exposed by the ticket mechanism.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nImplementor of the ping external API.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")