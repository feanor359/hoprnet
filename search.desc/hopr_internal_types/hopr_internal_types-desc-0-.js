searchState.loadedDescShard("hopr_internal_types", 0, "This crate contains all types that are specific to the …\nContains all types related to node identities.\nImplements types for on-chain announcement of nodes.\nImplements types related to HOPR payment channels.\nEnumerates all errors in this crate.\nTypes related to internal HOPR protocol logic.\nImplements types for tickets.\nRepresents a node announcement entry on the block chain. …\nType of the node account.\nNode is announced with a multi-address\nNode is not announced.\nIf the node has announced, did it announce with routing …\nReturns the argument unchanged.\nReturns the argument unchanged.\nIs the node announced?\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUsed to either set a PRN or revoke being a PRN\nGets the block number of the announcement if this peer ID …\nStructure containing data used for on-chain announcement. …\nHolds the signed binding of the chain key and the packet …\nDecapsulates the multiaddress (= strips the /p2p/&lt;peer_id&gt; …\nReturns the argument unchanged.\nReturns the argument unchanged.\nRe-construct binding from the chain key and packet key, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the multiaddress associated with this announcement.\nCreate and sign new key binding of the given chain key and …\nConstructs structure from multiaddress and optionally also …\nEnumerates possible changes on a channel entry update\nDescribes a direction of node’s own channel. The …\nOverall description of a channel\nDescribes status of a channel\nThe channel is closed.\nChannel balance has changed\nChannel epoch has changed\nThe other party is initiator of the channel.\nThe channel is opened.\nOur own node is the initiator of the channel.\nThe channel is pending to be closed. The timestamp marks …\nChannel status has changed\nTicket index has changed\nReturns the earliest time the channel can transition from …\nChecks if the closure time of this channel has passed. …\nReturn <code>ChannelStatus::Closed</code>\nCompares the two given channels and returns a vector of …\nDetermines the channel direction given the self address. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates channel ID hash from <code>source</code> and <code>destination</code> …\nGenerates the channel ID using the source and destination …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermines the channel’s direction and counterparty …\nCalculates the remaining channel closure grace period. …\nEnumeration of all core type related errors.\nContains the error value\nContains the success value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents packet acknowledgement\nRepresents the received decrypted packet carrying the …\nRepresent a default application tag if none is specified …\nDefault maximum incoming ticket winning probability, above …\nDefault required minimum incoming ticket winning …\nDefault ticket winning probability that will be printed on …\nNumber of intermediate hops: 3 relayers and 1 destination\nThe lowest possible ticket winning probability due to SC …\nMaximum size of the packet payload in bytes.\nContains either unacknowledged ticket if we’re waiting …\nTags are currently 16-bit unsigned integers\nBloom filter for packet tags to detect packet replays.\nWe’re waiting for the acknowledgement as a relayer with …\nWe’re waiting for acknowledgement as a sender\nObtains the acknowledged challenge out of this …\nCheck if packet tag is in the Bloom filter. False …\nChecks and sets a packet tag (if not present) in a single …\nReturns the current number of items in this Bloom filter.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerates random, but still a valid acknowledgement.\nPuts a packet tag into the Bloom filter\nValidates the acknowledgement.\nContains acknowledgment information and the respective …\nStatus of the acknowledged ticket.\nTicket is currently being aggregated in and ongoing …\nTicket is currently being redeemed in and ongoing …\nWinning probability encoded in 7-byte representation\nRepresents a winning ticket that can be successfully …\nContains the overall description of a ticket with a …\nBuilder for Ticket and VerifiedTicket.\nRepresents a ticket that could be transferred over the wire\nRepresents a VerifiedTicket with an unknown other part of …\nThe ticket is available for redeeming or aggregating\nHolds a ticket that has been already verified. This …\nVerifies that the given acknowledgement solves this ticket…\nSets channel id based on the <code>source</code> and <code>destination</code>. This, …\nSets the ticket amount. This or TicketBuilder::balance …\nAmount of HOPR tokens this ticket is worth. Always between …\nSets the ticket amount as HOPR balance. This or …\nVerifies all inputs and builds the Ticket. This <strong>does not</strong> …\nValidates all inputs and builds the VerifiedTicket by …\nValidates all input and builds the VerifiedTicket by …\nSets the EthereumChallenge for Proof of Relay. Must be set.\nRepresent the Proof of Relay challenge encoded as Ethereum …\nChannel domain separator used to compute the VRF …\nSets the channel epoch. Must be less or equal to 2^24. …\nEpoch of the channel this ticket belongs to. Always …\nSets the channel id. This, TicketBuilder::addresses or …\nChannel ID. See generate_channel_id for how this value is …\nReturn …\nSets channel id based on the <code>source</code> and <code>destination</code>. This, …\nEncoded winning probability represented via 56-bit number.\nEncodes [0.0f64, 1.0f64] to [0x00000000000000, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nComputes Ethereum signature hash of the ticket, must be …\nBased on the price of this ticket, determines the path …\nSets the ticket index. Must be less or equal to 2^48. …\nTicket index. Always between 0 and 2^48.\nSets the index offset. Must be greater or equal 1. …\nTicket index offset. Always between 1 and 2^32. For normal …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nShorthand to acknowledge the ticket if the matching …\nTransforms this ticket into RedeemableTicket that can be …\nAttempts to transform this ticket back into a …\nShorthand for transforming this ticket into …\nCreates new unacknowledged ticket from the VerifiedTicket, …\nReturns true if this ticket aggregates multiple tickets.\nChecks if this ticket is considered a win. Requires access …\nChecks if this acknowledged ticket is winning.\nDeconstructs self back into the unverified Ticket.\nSolution to the PoR challenge in the ticket.\nSigns the ticket using the given private key, turning this …\nSet the signature of this ticket. Defaults to <code>None</code>.\nECDSA secp256k1 signature of all the above values.\nVerified ticket that can be redeemed.\nFixed ticket hash that is guaranteed to be equal to …\nVerified issuer of the ticket. The returned address is …\nShorthand to retrieve reference to the verified ticket …\nTicket with already verified signature.\nConvenience method to retrieve a reference to the …\nConvenience method to retrieve a reference to the …\nConvenience method to retrieve a reference to the …\nVerifies the signature of this ticket, turning this ticket …\nVRF parameters required for redeeming.\nSets the ticket winning probability. Mutually exclusive …\nReturns the decoded winning probability of the ticket\nReturns the verified encoded winning probability of the …\nSets the encoded ticket winning probability. Mutually …\nDecodes [0x00000000000000, 0xffffffffffffff] to [0.0f64, …\nInitializes the builder for a zero hop ticket.")