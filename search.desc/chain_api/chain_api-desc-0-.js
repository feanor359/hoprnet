searchState.loadedDescShard("chain_api", 0, "Crate containing the API object for chain operations used …\nOverall description of a channel\nThe default HTTP request engine\nRepresents all chain interactions exported to be used in …\nThe default JSON RPC provider client\nContains TX hash along with the Chain Event data. This …\nChecks whether the node can be registered with the Safe in …\nReturns the earliest time the channel can transition from …\nChecks if the closure time of this channel has passed. …\nDetermines the channel direction given the self address. …\nChain event of interest\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates the channel ID using the source and destination …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermines the channel’s direction and counterparty …\nCalculates the remaining channel closure grace period. …\nExecute all processes of the <code>HoprChain</code> object.\nTX hash\nWaits until the given address is funded.\nHolds all information we need about the blockchain network …\nTypes of HOPR network environments.\nHolds all information about the protocol network to be …\nThe entire on-chain protocol configuration containing the …\ncontract addresses used by the network\naddress of contract that manages transport announcements …\naddress of contract that manages transport announcements …\nexpected block time on the chain in milliseconds\nmust match one of the Network.id\n= 0\nHoprChannels contract address, implementation of mixnet …\nHoprChannels contract address, implementation of mixnet …\nnumber of follow-on blocks required until a block is …\nnumber of follow-on blocks required until a block is …\na valid HTTP url pointing at a RPC endpoint\na valid HTTP url pointing at a RPC endpoint\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReads the protocol config JSON file and returns it\nthe network identifier, e.g. monte_rosa\nblock number to start the indexer from\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nmaximum block range to fetch while indexing logs\nmaximum block range to fetch when indexing logs\nThe absolute maximum you are willing to pay per unit of …\nTips paid directly to miners, e.g. ‘2 gwei’\nmaximum number of RPC requests per second\noptional maximum number of RPC requests per second for …\ncontract address of Safe capability module implementation\ncontract address of Safe capability module implementation\naddress of contract that manages authorization to access …\naddress of contract that manages authorization to access …\naddress of contract that maps to the requirements that …\naddress of contract that maps to the requirements that …\nReturns the network details, returns an error if network …\naddress of contract that maps between Safe instances and …\naddress of contract that maps between Safe instances and …\nfactory contract to produce Safe instances\nfactory contract to produce Safe instances\nReturns a list of environments which the node is able to …\naddress of contract that allows Hopr Association to …\naddress of contract that allows Hopr Association to …\nHopr token contract address\nHopr token contract address\nmilliseconds between polling the RPC for new transactions\nmilliseconds between polling the RPC for new transactions\nNode.js-fashioned semver string\naddress of contract that allows Hopr Association to …\naddress of contract that allows Hopr Association to …\nContains the error value\nError representing all possible erroneous states of the …\nContains the success value\nThe default Result object translating errors in the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents an abstract client that is capable of submitting\nImplementation of <code>TransactionExecutor</code> using the given …\nInstantiation of <code>EthereumClient</code> using <code>HoprRpcOperations</code>.\nReturn …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum time to wait for the TX to get submitted.\nSends transaction to the blockchain and returns its hash.\nSends transaction to the blockchain and awaits the …\nPost a transaction and wait for its completion.")