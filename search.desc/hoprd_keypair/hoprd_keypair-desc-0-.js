searchState.loadedDescShard("hoprd_keypair", 0, "Generates, reads, and writes hopr key material following …\nContains the error value\nContains the success value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nhoprd starts with a previously generated identitiy file. …\ntakes a private key and create an identity file at the …\nhoprd receives at startup a private which it will use for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates two new keypairs, one for off-chain affairs and …\nReads a keystore file using custom FS operations\nSerialize without private keys\nDeserializes HoprKeys from string\nDeserializes HoprKeys from binary string\nDeserializes HoprKeys from tuple of two binary private keys\nWrites a keystore file using custom FS operation and …\nidentifier of this keypair\npath to store / load identity file\npath to store / load identity file\nUsed encrypt / decrypt identity file\nUsed encrypt / decrypt identity file\nhex string containing the private key\nRepresents the “cipherparams” part of an encrypted …\nRepresents the “crypto” part of an encrypted JSON …\nThis struct represents the deserialized form of an …\nTypes of key derivition functions supported by the Web3 …\nDefines the various parameters used in the supported KDFs.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")