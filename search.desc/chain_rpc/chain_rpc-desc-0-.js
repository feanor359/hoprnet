searchState.loadedDescShard("chain_rpc", 0, "This crate contains types and traits that ensure correct …\nStructure containing filtered logs that all belong to the …\nTrait with RPC provider functionality required by the …\nTrait defining a general set of operations an RPC provider …\nAbstraction for an HTTP client that performs HTTP POST …\nCommon configuration for all native <code>HttpPostRequestor</code>s\nA type containing selected fields from  the <code>eth_getLogs</code> …\nRepresents a filter to extract logs containing specific …\nRequest should not be retried\nRepresents the on-chain status for the Node Safe module.\nRepresents a pending transaction that can be eventually …\nIndicates what retry action should be taken, as result of …\nRequest should be retried after the given duration has …\nSimple retry policy trait\nContains some selected fields of a receipt for a …\nThe TypedTransaction enum represents all Ethereum …\nPerforms no retries.\nContract address\nContract addresses\nBlock number\nRetrieves the latest block number.\nCorresponding block number\nNumber of the block in which the transaction has been …\nRetrieves the on-chain status of node, safe, and module.\nExtended <code>JsonRpcClient</code> abstraction.\nShorthand for creating a new EIP1559 transaction object.\nRaw log data\nDecodes a signed TypedTransaction from a rlp encoded byte …\nReturn …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves the node’s account balance of the given type.\nRetrieves the notice period of channel closure from the …\nRetrieves the node’s eligibility status\nRetrieves target address of the node module.\nRetrieves info of the given node module’s target.\nRetrieves safe address of the given node address from the …\nRetrieves the timestamp from the given block number.\nHashes the transaction’s data with the included …\nPerforms HTTP POST of JSON data to the given URL and gets …\nTimeout for HTTP POST request\nExtends the RpcOperations type with functionality needed …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates if this filter filters anything.\nReturns <code>true</code> if no logs are contained within this block.\nIndicates whether a client should retry the request given …\nReturns the number of logs within this block.\nLog index\nFiltered logs belonging to this block.\nMax cost of the transaction\nMaximum number of HTTP redirects to follow\nMaximum number of requests per second. If set to Some(0) …\nGeneral purpose high-level RPC operations implementation (…\nSends transaction to the RPC provider.\nDetermines if the node passes all status checks.\nHashes the transaction’s data. Does not double-RLP encode\nTopics\nEvent topics\nStarts streaming logs from the given <code>start_block_number</code>. …\nHash of the pending transaction.\nCorresponding transaction hash\nHash of the transaction.\nTransaction index\nModified implementation of <code>ethers::providers::Http</code> so that …\nSnapshot of a response cached by the <code>SnapshotRequestor</code>.\nDefines a retry policy suitable for <code>JsonRpcProviderClient</code>.\nReplays an RPC response to a request if it is found in the …\nBackoff coefficient by which will be each retry multiplied.\nIndicates whether to also apply backoff to transport and …\nClears all entries from the snapshot in memory. The …\nUsed for testing. Creates Ethers RPC client to the local …\nReturn …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitial wait before retries.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSimilar as <code>SnapshotRequestor::try_load</code>, except that no …\nMaximum backoff value.\nMaximum number of retries.\nMaximum number of different requests that are being …\nMinimum number of retries of any error, regardless the …\nCreates the client given the <code>HttpPostRequestor</code>\nCreates a new instance by wrapping an existing …\nList of HTTP errors that should be retried with backoff.\nList of JSON RPC errors that should be retried with backoff\nSave the currently cached entries to the snapshot file on …\nGets the path to the snapshot disk file.\nClears all entries and loads them from the snapshot file. …\nForces saving to disk on each newly inserted entry.\nIf set, the snapshot data will be ignored and resolution …\nHTTP client that uses a Tokio runtime-based HTTP client …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHTTP client that uses a non-Tokio runtime based HTTP …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nContains the error value\nError abstraction for <code>HttpRequestor</code>.\nErrors for <code>JsonRpcProviderClient</code>\nContains the success value\nEnumerates different errors produced by this crate.\nSerde JSON Error\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnderlying error\nThe contents of the HTTP response that could not be …\nImplementation of <code>HoprRpcOperations</code> and …\nConfiguration of the RPC related parameters.\nBlockchain id\nAddresses of all deployed contracts\nReturn …\nExpected block time of the blockchain\nFinalization chain length\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe largest amount of blocks to fetch at once when …\nAddress of the node’s module.\nAddress of the node’s safe contract.\nThis module was auto-generated with ethers-rs Abigen. More …\nInterval for polling on TX submission\nContainer type for all input parameters for the …\nContainer type for all return fields from the …\nThe parsed human-readable ABI of the contract.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls the contract’s <code>isModuleEnabled</code> (0x2d9ad53d) …\nCreates a new contract instance with the specified <code>ethers</code> …")