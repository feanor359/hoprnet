searchState.loadedDescShard("hopr_strategy", 0, "This crate contains all the Strategies for HOPRd. …\nEnumerates all possible strategies with their respective …\nAn alias for strategy configuration type.\nAggregating Strategy\nIndicate whether the <code>MultiStrategy</code> can contain another …\nAuto Funding Strategy\nAuto Redeeming Strategy\nExecution interval of the configured strategies in seconds.\nReturns the argument unchanged.\nDefault HOPR node strategies (in order).\nCalls <code>U::from(self)</code>.\nDetermines if the strategy should continue executing the …\nPromiscuous Strategy\nConfiguration of individual sub-strategies.\nMulti Strategy\nRepresents a strategy that starts aggregating tickets in a …\nConfiguration object for the <code>AggregatingStrategy</code>\nIf set, the strategy will automatically aggregate tickets …\nNumber of acknowledged winning tickets in a channel that …\nReturn …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPercentage of unrealized balance in unaggregated tickets …\nThe <code>AutoFundingStrategy</code> automatically funds channel that …\nConfiguration for <code>AutoFundingStrategy</code>\nReturn …\nReturns the argument unchanged.\nReturns the argument unchanged.\nFunding amount.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMinimum stake that a channel’s balance must not go below.\nThe <code>AutoRedeemingStrategy</code> automatically sends an …\nConfiguration object for the <code>AutoRedeemingStrategy</code>\nReturn …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe strategy will automatically redeem if there’s a …\nIf set, the strategy will redeem only aggregated tickets.\nContains the error value\nContains the success value\nEnumerates all errors in this crate.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis strategy opens outgoing channels to peers, which have …\nConfiguration of PromiscuousStrategy.\nReturn …\nIf set, the strategy will aggressively close channels …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum number of opened channels the strategy should …\nMinimum number of network quality samples before the …\nMinimum token balance of the node. When reached, the …\nSpecifies a minimum version (in semver syntax) of the peer …\nA quality threshold between 0 and 1 used to determine …\nA stake of tokens that should be allocated to a channel …\nDefines an execution chain of <code>SingularStrategies</code>. The …\nConfiguration options for the <code>MultiStrategy</code> chain. If …\nBasic single strategy.\nIndicate whether the <code>MultiStrategy</code> can contain another …\nReturn …\nExecution interval of the configured strategies in seconds.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs new <code>MultiStrategy</code>. The strategy can contain …\nStrategy event raised when a new <strong>winning</strong> acknowledged …\nDetermines if the strategy should continue executing the …\nStrategy event raised whenever the Indexer registers a …\nStrategy event raised at period intervals (typically each …\nConfiguration of individual sub-strategies.")