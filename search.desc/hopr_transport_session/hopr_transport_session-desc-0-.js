searchState.loadedDescShard("hopr_transport_session", 0, "<code>Session</code> object providing the session functionality over …\nCapabilities of a session.\nAn iterator over the variants of Capability\nDNS name and port.\nRandom intermediate path with at least the given number of …\nA fixed intermediate path consisting of at most …\nIP address with port.\nImplements a host name with port. This could be either a …\nLists some of the IP protocols.\nThe maximum number of hops this instance can represent.\nFrame reassembly\nRepresents routing options in a mixnet with a maximum …\nFrame segmentation\nConfiguration for the session.\nCapabilities offered by the session.\nReturns the number of hops this instance represents. This …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the unresolved DNS name or IP address as string.\nThis module defines the Start sub-protocol used for HOPR …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInverts the intermediate path if this is an instance of …\nChecks if this instance is a DNS name.\nChecks if this instance is an IP address and whether it is …\nChecks if this instance is an IP address and whether it is …\nChecks if this instance is an IP address and whether it is …\nThe fixed path options for the session.\nThe peer to which the session should be established.\nGets the port number.\nTries to resolve the DNS name and returns all IP addresses …\nTries to resolve the DNS name and returns all IP addresses …\nTries to resolve the DNS name and returns all IP addresses …\nTarget of the session.\nProtocol to be used to connect to the target\nContains the error value\nContains the success value\nEnumeration of errors thrown from this library.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRecipient is busy.\nCounterparty has closed the session.\nNo more slots are available at the recipient.\nCounterparty could not establish a new session due to an …\nConfirmation that a new session has been established by …\nChallenge that identifies a Start initiation protocol …\nLists all Start protocol error reasons.\nError message in the Start protocol.\nMessage of the Start protocol that confirms the …\nThe session initiation message of the Start protocol.\nLists all messages of the Start protocol for a session …\nRequest to initiate a new session.\nOptional information on back routing from the other party …\nCapabilities of the session.\nChallenge that relates to this error.\nRandom challenge for this initiation.\nDeserialize the message from message tag and message data. …\nSerialize the message into a message tag and message data. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChallenge that was used in the initiation message to …\nThe reason of this error.\nSession ID that was selected by the recipient.\nTarget of the session, i.e., what should the other party …\nTarget is a service directly at the exit node with a given …\nWrapper for incoming Session along with other information …\nInner MTU size of what the HOPR payload can take (payload …\nUnique ID of a specific session.\nDefines what should happen with the data at the recipient …\nTarget is running over TCP with the given address and port.\nTarget is running over UDP with the given IP address and …\nCapabilities of this Session.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nID of this Session.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRouting options used to deliver data.\nActual incoming session.\nDesired target of the data received over the session.\nConvenience function to copy data in both directions …")