searchState.loadedDescShard("core_path", 0, "This Rust crate contains all the path construction and …\nDefines the graph of HOPR payment channels.\nDefines the two most important types: TransportPath and …\nImplements different path selectors in the ChannelGraph.\nStructure that adds additional data to a <code>ChannelEntry</code>, …\nImplements a HOPR payment channel graph (directed) cached …\nMaximum number of intermediate hops the automatic path …\nUnderlying channel\nChecks whether the given channel is in the graph already.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLooks up an <code>Open</code> or <code>PendingToClose</code> channel given the …\nGets quality of the given channel. Returns <code>None</code> if no such …\nChecks whether there’s any path via Open channels that …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the channel is incoming to or outgoing from this …\nConvenience method to get this node’s own address\nCreates a new instance with the given self <code>Address</code>.\nGets all <code>Open</code> outgoing channels going from the given …\nNetwork quality of this channel at the transport level (if …\nSynchronizes the channel entries in this graph with the …\nInserts or updates the given channel in the channel graph. …\nUpdates the quality value of network connection between …\nContains the error value\nContains the success value\nEnumerates all errors in this crate.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents an on-chain path in the ChannelGraph.\nBase implementation of an abstract path. Must contain …\nRepresents an off-chain path of PeerIds.\nChecks if all the hops in this path are to distinct …\nConstructs a direct <code>TransportPath</code> (= 0-hop ChannelPath)\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndividual hops in the path. There must be always at least …\nThe <code>TransportPath</code> always returns one extra hop to the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nResolves this on-chain <code>ChannelPath</code> into the off-chain …\nGets the last hop\nShorthand for number of hops.\nCreates a new path by validating the list of addresses …\nResolves vector of PeerIds into the corresponding …\nComputes weights of edges corresponding to <code>ChannelEntry</code>.\nTrait for implementing custom path selection algorithm …\nEdge weighting function.\nConstructs a new valid packet <code>Path</code> from self and the given …\nSelect path of maximum <code>max_hops</code> from <code>source</code> to <code>destination</code> …\nCalculates the total weight of the given outgoing channel …\nLegacy path selector using depth-first search of the …\nLegacy DFS path selector with channel weighting function …\nAssigns each channel a weight. The weight is randomized …\nIf true, include paths with payment channels, which have no\nIf true, include paths with payment channels, which have no\nMultiply all channel stake with a random float in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum number of iterations before a path selection fails …\nMaximum number of iterations before a path selection fails …\nPeer quality threshold for a channel to be taken into …\nPeer quality threshold for a channel to be taken into …\nAttempts to find a path with at least <code>min_hops</code> hops and at …")