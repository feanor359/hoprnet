searchState.loadedDescShard("core_network", 0, "Network and physical transport related utilities\nIdentifier of a peer of the network.\nAdds a peer to the backend.\nConfiguration of the network module.\nGlobal constants published from this crate.\nErrors that can be generated by the crate.\nReturns the argument unchanged.\nParses a <code>PeerId</code> from bytes.\nTries to turn a <code>Multihash</code> into a <code>PeerId</code>.\nBuilds a <code>PeerId</code> from a public key.\nGets stored information about the peer.\nReturns a stream of all stored peers, optionally matching …\nImplementation of the main loop for the heartbeat …\nCalls <code>U::from(self)</code>.\nLow-level transport protocol messaging definitions for ping…\nImplementation of the peer network logic\nReturns the statistics on the stored peers.\nImplementation of the pinging mechanism used by the …\nGenerates a random peer ID from a cryptographically secure …\nRemoves the peer from the backend.\nReturns a base-58 encoded string of this <code>PeerId</code>.\nReturns a raw bytes representation of this <code>PeerId</code>.\nUpdates stored information about the peer. Should fail if …\nNetwork quality threshold since which a node is considered …\nConfiguration for the <code>crate::network::Network</code> object\nReturn …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMaximum delay\nMinimum delay will be multiplied by backoff, it will be …\nInterval to run heartbeat rounds, must include enough time …\nRandomization of the heartbeat interval to make sure not …\nTime after which the availability of a node gets rechecked\nContains the error value\nErrors that can be generated by the crate.\nContains the success value\nResult built on top of the crate error NetworkingError\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHeartbeat mechanism providing the regular trigger and …\nConfiguration for the Heartbeat mechanism\nImplementor of the heartbeat external API.\nReturn …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet all peers considered by the <code>Network</code> to be pingable.\nGet all peers considered by the <code>Network</code> to be pingable.\nHeartbeat loop responsible for periodically requesting …\nInterval in which the heartbeat is triggered in seconds\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe time interval for which to consider peer heartbeat …\nRound-to-round variance to complicate network sync in …\nImplementation of the Control Message sub-protocol, which …\nPing challenge\nPong response to a Ping\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a ping challenge message.\nGiven the received ping challenge, generates an …\nConvenience method to de-structure the ping message …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets the challenge or response in this ping/pong message.\nGiven the original ping challenge message, verifies that …\nHigh quality connection to at least 1 public relay and 1 …\nNetwork health represented with colors, where green is the …\nThe network object storing information about the running …\nEvents generated by the Network object allowing it to …\nLow quality connection to at least 1 public relay\nActual origin.\nStatus of the peer as recorded by a network component.\nNo connection, default\nStatistical observation related to peers in the network. …\nUnknown health, on application startup\nHigh quality connection to at least 1 public relay\nAdd a new peer into the network\nAdds a peer to the backend.\nReturns count of all peers.\nNumber of bad-quality non-public nodes.\nNumber of bad-quality public nodes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the average quality of this peer\nGets stored information about the peer.\nReturns a stream of all stored peers, optionally matching …\nGets the immediate node quality\nNumber of good-quality non-public nodes.\nNumber of good-quality public nodes.\nCheck whether the PeerId is present in the network\nReturns the quality of the network as a network health …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLower and upper bounds (both inclusive) on last seen …\nReturns the statistics on the stored peers.\nLower and upper bounds (both inclusive) on peer quality.\nRemove peer from the network\nRemoves the peer from the backend.\nUpdate the peer record with the observation\nUpdates stored information about the peer. Should fail if …\nContains the error value\nHeartbeat send ping TX type\nThe maximum number of pings that are allowed to run in …\nContains the success value\nConfiguration for the <code>Pinger</code> mechanism\nExternal behavior that will be triggered once a ping …\nHelper object allowing to send a ping query as a wrapped …\nPing query result type holding data about the ping …\nImplementation of the ping mechanism\nTrait for the ping operation itself.\nReturn a copy of the challenge for which the reply is …\nReturn …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum total allowed concurrent heartbeat ping count\nMechanism to finalize the ping operation by providing a …\nPerforms multiple concurrent async pings to the specified …\nThe timeout duration for an indiviual ping\nTimeout-based future that will resolve to the result of …")